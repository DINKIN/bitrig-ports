$OpenBSD$
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Fri May 11 19:16:02 2012
+++ tools/clang/lib/Driver/ToolChains.cpp	Thu Aug 16 08:41:50 2012
@@ -1566,6 +1566,88 @@ Tool &TCEToolChain::SelectTool(const Compilation &C,
   return *T;
 }
 
+/// Bitrig - Bitrig tool chain which can call as(1) and ld(1) directly.
+
+Bitrig::Bitrig(const Driver &D, const llvm::Triple& Triple, const ArgList &Args)
+  : Generic_ELF(D, Triple, Args) {
+  getFilePaths().push_back(getDriver().Dir + "/../lib");
+  getFilePaths().push_back("/usr/lib");
+}
+
+Tool &Bitrig::SelectTool(const Compilation &C, const JobAction &JA,
+                          const ActionList &Inputs) const {
+  Action::ActionClass Key;
+  if (getDriver().ShouldUseClangCompiler(C, JA, getTriple()))
+    Key = Action::AnalyzeJobClass;
+  else
+    Key = JA.getKind();
+
+  bool UseIntegratedAs = C.getArgs().hasFlag(options::OPT_integrated_as,
+                                             options::OPT_no_integrated_as,
+                                             IsIntegratedAssemblerDefault());
+
+  Tool *&T = Tools[Key];
+  if (!T) {
+    switch (Key) {
+    case Action::AssembleJobClass: {
+      if (UseIntegratedAs)
+        T = new tools::ClangAs(*this);
+      else
+        T = new tools::bitrig::Assemble(*this);
+      break;
+    }
+    case Action::LinkJobClass:
+      T = new tools::bitrig::Link(*this); break;
+    default:
+      T = &Generic_GCC::SelectTool(C, JA, Inputs);
+    }
+  }
+
+  return *T;
+}
+
+void Bitrig::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                         ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  CXXStdlibType Type = GetCXXStdlibType(DriverArgs);
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    addSystemInclude(DriverArgs, CC1Args, getDriver().SysRoot + "/usr/include/c++/");
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    std::string Triple = getTriple().str();
+    if (Triple.substr(0, 5) == "amd64")
+      Triple.replace(0, 5, "x86_64");
+
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++");
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++/backward");
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++/" + Triple);
+    break;
+  }
+}
+
+void Bitrig::AddCXXStdlibLibArgs(const ArgList &Args,
+                                      ArgStringList &CmdArgs) const {
+  CXXStdlibType Type = GetCXXStdlibType(Args);
+
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lcxxrt");
+    /* for now we borrow Unwind from supc++ */
+    CmdArgs.push_back("-lgcc");
+    break;
+
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
+}
+
 /// OpenBSD - OpenBSD tool chain which can call as(1) and ld(1) directly.
 
 OpenBSD::OpenBSD(const Driver &D, const llvm::Triple& Triple, const ArgList &Args)
@@ -1604,6 +1686,24 @@ Tool &OpenBSD::SelectTool(const Compilation &C, const 
   }
 
   return *T;
+}
+
+void OpenBSD::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                         ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  //llvm::errs() << "trying to add some includes\n";
+
+  addSystemInclude(DriverArgs, CC1Args, "/usr/local/include/c++/4.6.2/");
+  addSystemInclude(DriverArgs, CC1Args, "/usr/local/include/c++/4.6.2/x86_64-unknown-openbsd5.1/");
+}
+
+void OpenBSD::AddCXXStdlibLibArgs(const ArgList &Args,
+                                      ArgStringList &CmdArgs) const {
+  //llvm::errs() << "doing the linker dance\n";
+  CmdArgs.push_back("-lestdc++");
 }
 
 /// FreeBSD - FreeBSD tool chain which can call as(1) and ld(1) directly.
