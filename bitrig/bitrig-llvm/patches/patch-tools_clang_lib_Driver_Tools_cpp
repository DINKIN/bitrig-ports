$OpenBSD$
--- tools/clang/lib/Driver/Tools.cpp.orig	Mon Nov  7 04:27:39 2011
+++ tools/clang/lib/Driver/Tools.cpp	Tue Mar 13 21:50:52 2012
@@ -1738,8 +1738,11 @@ void Clang::ConstructJob(Compilation &C, const JobActi
     else if (A->getOption().matches(options::OPT_fstack_protector_all))
       StackProtectorLevel = 2;
   } else {
-    StackProtectorLevel =
-      getToolChain().GetDefaultStackProtectorLevel(KernelOrKext);
+    if (getToolChain().getTriple().getOS() == llvm::Triple::OpenBSD)
+      StackProtectorLevel = 1;
+    else
+      StackProtectorLevel =
+        getToolChain().GetDefaultStackProtectorLevel(KernelOrKext);
   }
   if (StackProtectorLevel) {
     CmdArgs.push_back("-stack-protector");
@@ -3805,9 +3808,13 @@ void openbsd::Link::ConstructJob(Compilation &C, const
   if (!Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nostartfiles)) {
     if (!Args.hasArg(options::OPT_shared)) {
+      if (Args.hasArg(options::OPT_pg))  
+        CmdArgs.push_back(Args.MakeArgString(
+                                getToolChain().GetFilePath("gcrt0.o")));
+      else
+        CmdArgs.push_back(Args.MakeArgString(
+                                getToolChain().GetFilePath("crt0.o")));
       CmdArgs.push_back(Args.MakeArgString(
-                              getToolChain().GetFilePath("crt0.o")));
-      CmdArgs.push_back(Args.MakeArgString(
                               getToolChain().GetFilePath("crtbegin.o")));
     } else {
       CmdArgs.push_back(Args.MakeArgString(
@@ -3815,12 +3822,26 @@ void openbsd::Link::ConstructJob(Compilation &C, const
     }
   }
 
+  // XXX this is a terrible hack but needed untile we can switch from amd64 to x86_64
   std::string Triple = getToolChain().getTripleString();
-  if (Triple.substr(0, 6) == "x86_64")
-    Triple.replace(0, 6, "amd64");
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple +
-                                       "/4.2.1"));
+  if (Triple.substr(0, 5) == "amd64")
+    Triple.replace(0, 5, "x86_64");
 
+  bool PICEnabled = (Args.hasArg(options::OPT_fPIC) ||
+                     Args.hasArg(options::OPT_fpic) ||
+                     Args.hasArg(options::OPT_fPIE) ||
+                     Args.hasArg(options::OPT_fpie));
+  // i386 does NOT have an fpic directory unlike amd64
+  if (PICEnabled && getToolChain().getArchName() == "amd64") {
+    CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + Triple +
+                                         "/4.6.2/fpic"));
+    //llvm::errs() << "LINKJOB " << "-L/usr/lib/gcc/" << Triple << "/4.6.2/fpic\n";
+  } else {
+    CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc/" + Triple +
+                                         "/4.6.2"));
+    //llvm::errs() << "LINKJOB " << "-L/usr/lib/gcc/" << Triple << "/4.6.2\n";
+  }
+
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
   Args.AddAllArgs(CmdArgs, options::OPT_e);
@@ -3831,7 +3852,10 @@ void openbsd::Link::ConstructJob(Compilation &C, const
       !Args.hasArg(options::OPT_nodefaultlibs)) {
     if (D.CCCIsCXX) {
       getToolChain().AddCXXStdlibLibArgs(Args, CmdArgs);
-      CmdArgs.push_back("-lm");
+      if (Args.hasArg(options::OPT_pg)) 
+        CmdArgs.push_back("-lm_p");
+      else
+        CmdArgs.push_back("-lm");
     }
 
     // FIXME: For some reason GCC passes -lgcc before adding
@@ -3840,8 +3864,12 @@ void openbsd::Link::ConstructJob(Compilation &C, const
 
     if (Args.hasArg(options::OPT_pthread))
       CmdArgs.push_back("-lpthread");
-    if (!Args.hasArg(options::OPT_shared))
-      CmdArgs.push_back("-lc");
+    if (!Args.hasArg(options::OPT_shared)) {
+      if (Args.hasArg(options::OPT_pg)) 
+         CmdArgs.push_back("-lc_p");
+      else
+         CmdArgs.push_back("-lc");
+    }
     CmdArgs.push_back("-lgcc");
   }
 
