$OpenBSD$
--- tools/clang/lib/Basic/Targets.cpp.orig	Mon Dec  9 03:58:56 2013
+++ tools/clang/lib/Basic/Targets.cpp	Thu May 22 22:31:24 2014
@@ -430,6 +430,7 @@ class BitrigTargetInfo : public OSTargetInfo<Target> {
     // Bitrig defines; list based off of gcc output
 
     Builder.defineMacro("__Bitrig__");
+    Builder.defineMacro("__OpenBSD__");
     DefineStd(Builder, "unix", Opts);
     Builder.defineMacro("__ELF__");
     if (Opts.POSIXThreads)
@@ -438,7 +439,7 @@ class BitrigTargetInfo : public OSTargetInfo<Target> {
 public:
   BitrigTargetInfo(const llvm::Triple &Triple) : OSTargetInfo<Target>(Triple) {
     this->UserLabelPrefix = "";
-    this->TLSSupported = false;
+    this->TLSSupported = true;
     this->MCountName = "__mcount";
   }
 };
@@ -4230,6 +4231,15 @@ class DarwinARMTargetInfo : (public)
 };
 } // end anonymous namespace.
 
+namespace {
+class BitrigARMTargetInfo : public BitrigTargetInfo<ARMTargetInfo> {
+public:
+  BitrigARMTargetInfo(const llvm::Triple &Triple)
+      : BitrigTargetInfo<ARMTargetInfo>(Triple) {
+    SizeType = UnsignedLong;
+  }
+};
+} // end anonymous namespace
 
 namespace {
 // Hexagon abstract base class
@@ -5548,6 +5558,8 @@ static TargetInfo *AllocateTarget(const llvm::Triple &
     switch (os) {
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<AArch64TargetInfo>(Triple);
+    case llvm::Triple::Bitrig:
+      return new BitrigTargetInfo<AArch64TargetInfo>(Triple);
     default:
       return new AArch64TargetInfo(Triple);
     }
@@ -5567,7 +5579,7 @@ static TargetInfo *AllocateTarget(const llvm::Triple &
     case llvm::Triple::OpenBSD:
       return new OpenBSDTargetInfo<ARMTargetInfo>(Triple);
     case llvm::Triple::Bitrig:
-      return new BitrigTargetInfo<ARMTargetInfo>(Triple);
+      return new BitrigARMTargetInfo(Triple);
     case llvm::Triple::RTEMS:
       return new RTEMSTargetInfo<ARMTargetInfo>(Triple);
     case llvm::Triple::NaCl:
