$OpenBSD$
--- tools/clang/lib/Basic/Targets.cpp.orig	Thu Sep 20 11:12:43 2012
+++ tools/clang/lib/Basic/Targets.cpp	Thu Sep 20 14:47:02 2012
@@ -406,6 +406,7 @@ class BitrigTargetInfo : public OSTargetInfo<Target> {
     // Bitrig defines; list based off of gcc output
 
     Builder.defineMacro("__Bitrig__");
+    Builder.defineMacro("__OpenBSD__");
     DefineStd(Builder, "unix", Opts);
     Builder.defineMacro("__ELF__");
     if (Opts.POSIXThreads)
@@ -3443,6 +3444,18 @@ const Builtin::Info ARMTargetInfo::BuiltinInfo[] = {
 } // end anonymous namespace.
 
 namespace {
+class BitrigARMTargetInfo : public BitrigTargetInfo<ARMTargetInfo> {
+public:
+  BitrigARMTargetInfo(const std::string& triple)
+      : BitrigTargetInfo<ARMTargetInfo>(triple) {
+    // Bitrig always has 64-bit atomic instructions.
+    // FIXME: This should be based off of the target features in ARMTargetInfo.
+    MaxAtomicInlineWidth = 64;
+  }
+};
+} // end anonymous namespace
+
+namespace {
 class DarwinARMTargetInfo :
   public DarwinTargetInfo<ARMTargetInfo> {
 protected:
@@ -4430,7 +4443,7 @@ static TargetInfo *AllocateTarget(const std::string &T
     case llvm::Triple::OpenBSD:
       return new OpenBSDTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::Bitrig:
-      return new BitrigTargetInfo<ARMTargetInfo>(T);
+      return new BitrigARMTargetInfo(T);
     case llvm::Triple::RTEMS:
       return new RTEMSTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::NativeClient:
