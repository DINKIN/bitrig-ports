$OpenBSD$
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Thu Sep 20 11:12:43 2012
+++ tools/clang/lib/Driver/ToolChains.cpp	Thu Sep 20 16:33:19 2012
@@ -1635,19 +1635,38 @@ void Bitrig::AddClangCXXStdlibIncludeArgs(const ArgLis
       DriverArgs.hasArg(options::OPT_nostdincxx))
     return;
 
-  std::string Triple = getTriple().str();
-  if (Triple.substr(0, 5) == "amd64")
-    Triple.replace(0, 5, "x86_64");
+  CXXStdlibType Type = GetCXXStdlibType(DriverArgs);
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    addSystemInclude(DriverArgs, CC1Args, getDriver().SysRoot + "/usr/include/c++/");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    std::string Triple = getTriple().str();
+    if (Triple.substr(0, 5) == "amd64")
+      Triple.replace(0, 5, "x86_64");
 
-  addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/4.6.2");
-  addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/4.6.2/backward");
-  addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/4.6.2/" + Triple);
-
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++");
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++/backward");
+    addSystemInclude(DriverArgs, CC1Args, "/usr/include/c++/stdc++/" + Triple);
+    break;
+  }
 }
 
 void Bitrig::AddCXXStdlibLibArgs(const ArgList &Args,
                                  ArgStringList &CmdArgs) const {
-  CmdArgs.push_back("-lstdc++");
+  CXXStdlibType Type = GetCXXStdlibType(Args);
+
+  switch (Type) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lcxxrt");
+    /* for now we borrow Unwind from supc++ */
+    CmdArgs.push_back("-lgcc");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
 }
 
 /// FreeBSD - FreeBSD tool chain which can call as(1) and ld(1) directly.
