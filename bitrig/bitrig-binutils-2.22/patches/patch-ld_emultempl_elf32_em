$OpenBSD$
--- ld/emultempl/elf32.em.orig	Mon Nov 21 04:29:39 2011
+++ ld/emultempl/elf32.em	Sun Mar 17 13:35:44 2013
@@ -82,6 +82,235 @@ EOF
   esac
 fi
 
+case ${target} in
+  *-*-openbsd* | *-*-bitrig*)
+    cat >>e${EMULATION_NAME}.c <<EOF
+#include <sys/types.h>
+#include <dirent.h>
+
+/* Search a directory for a .so file.  */
+
+static char * gld${EMULATION_NAME}_search_dir_needed (const char *dirlist, const char *filename);
+
+static char * gld${EMULATION_NAME}_search_dir (const char *dirname,
+  const char *filename, int req_maj, int req_min);
+
+static char * gld${EMULATION_NAME}_split_lib_name (char *name, int *pmaj,
+  int *pmin);
+
+/* THIS FUNCTION MODIFIES THE name ARGUMENT string */
+static char *
+gld${EMULATION_NAME}_split_lib_name (name, pmaj, pmin)
+  char *name;
+  int *pmaj, *pmin;
+{
+  char*eptr, *lib = name;
+  char *s;
+  int found_so = 0;
+
+  *pmaj = -1;
+  *pmin = -1;
+  
+  if (strncmp(lib, "lib", 3) == 0)   
+    lib += 3;
+
+  s = lib;
+  while (found_so == 0)
+    {
+      s = strstr(s, ".so");
+
+      /* if .so not found, return not found, invalid lib name */
+      if (s == NULL)
+	{
+	  return NULL;
+	}
+
+      /* if .so is at end of string, fine return with pmaj/pmin -1 */
+      if (s[3] == '\0')
+	{
+	  *s = '\0';
+	  return lib;
+	}
+
+      if (s[3] == '.')
+	{
+	  *s = '\0';
+	  found_so = 1;
+	}
+      /* skip over the ".so" */
+      s += 3;
+    }
+
+  
+  /* lib[name].so.[M].[N] */
+  /*  s          ^        */
+  s += 1;
+
+  /* lib[name].so.[M].[N] */
+  /*  s           ^       */
+  *pmaj = strtoul (s, &eptr, 10);
+
+  /* lib[name].so.[M]X... */
+  /*  eptr           ^    */
+  if (*eptr != '.' || s == eptr)
+    return NULL; /* invalid, must have minor */
+
+  s = eptr+1;
+
+  /* lib[name].so.[M].[N]  */
+  /*  s               ^    */
+  *pmin = strtoul (s, &eptr, 10);
+
+  /* lib[name].so.[M].[N]  */
+  /*  eptr               ^ */
+  if (*eptr != '\0' || s == eptr)
+    return NULL;  /* minor must be last field of library */
+
+  return lib;
+}
+
+static char *
+gld${EMULATION_NAME}_search_dir_needed (dirlist, filename)
+    const char *dirlist;
+    const char *filename;
+{
+  char *dlist, *dlist_alloc, *dir;
+  char *fnam, *fnam_alloc, *lib;
+  char *found = NULL;
+  int maj = -1, min = -1;
+  
+  dlist_alloc = dlist = xstrdup(dirlist);
+  fnam_alloc = fnam = xstrdup(filename);
+  
+  lib = gld${EMULATION_NAME}_split_lib_name(fnam, &maj, &min);
+  
+  while (lib != NULL && found == NULL)
+    {
+      dir = strsep(&dlist, ":");
+      if (dir == NULL)
+	break;
+      if (*dir == '\0')
+	continue; /* skip dirlist of ...::... */
+      found = gld${EMULATION_NAME}_search_dir(dir, lib, maj, min);
+    }
+  
+  free(dlist_alloc);
+  free(fnam_alloc);
+  return found;
+}
+
+
+static char *
+gld${EMULATION_NAME}_search_dir (dirname, filename, req_maj, req_min)
+     const char *dirname;
+     const char *filename;
+     int req_maj, req_min;
+{
+  unsigned int len;
+  char *found;
+  int max_maj, max_min;
+  DIR *dir;
+  struct dirent *entry;
+  unsigned int dirnamelen;
+  char *full_path;
+  int statval;
+  struct stat st;
+
+  len = strlen (filename);
+  found = NULL;
+  max_maj = max_min = 0;
+
+  dir = opendir (dirname);
+  if (dir == NULL)
+    return NULL;
+  dirnamelen = strlen (dirname);
+  
+  while ((entry = readdir (dir)) != NULL)
+    {
+      const char *s;
+      char *eptr, *eptr1;
+      int found_maj, found_min;
+
+      if (strncmp (entry->d_name, "lib", 3) != 0
+	  || strncmp (entry->d_name + 3, filename, len) != 0)
+	continue;
+
+      /* We accept libfoo.so without a version number, even though the
+         native linker does not.  This is more convenient for packages
+         which just generate .so files for shared libraries, as on ELF
+         systems.  */
+      if (strncmp (entry->d_name + 3 + len, ".so", 3) != 0)
+	continue;
+
+      if (entry->d_name[6 + len] == '\0')
+	;
+      else if (entry->d_name[6 + len] == '.'
+	       && ISDIGIT ((unsigned char) entry->d_name[7 + len]))
+	;
+      else
+	continue;
+
+      for (s = entry->d_name + 6 + len; *s != '\0'; s++)
+	if (*s != '.' && ! ISDIGIT ((unsigned char) *s))
+	  break;
+      if (*s != '\0')
+	continue;
+
+      /* We've found a .so file.  Work out the major and minor
+	 version numbers.  */
+      found_maj = -1;
+      found_min = -1;
+
+      /* do allow libN.so */
+      if (entry->d_name[6 + len] == '.') {
+	found_maj = strtoul (entry->d_name + 7 + len, &eptr, 10);
+
+	/* do not support libN.so. or libN.so.X */
+	if (*eptr != '.' || ((entry->d_name + 3 + len) == eptr)) 
+	  continue;
+
+	found_min = strtoul (eptr+1, &eptr1, 10);
+
+	/* do not support libN.so.X. or libN.so.X.Y.[anything] */
+	if (*eptr1 != '\0' || (eptr+1 == eptr1)) 
+	  continue;
+      }
+
+      /* Make sure the file really exists (ignore broken symlinks).  */
+      full_path = xmalloc (dirnamelen + 1 + strlen (entry->d_name) + 1);
+      sprintf (full_path, "%s/%s", dirname, entry->d_name);
+      statval = stat (full_path, &st);
+      free (full_path);
+      if (statval != 0)
+	continue;
+
+      /* We've found a match for the name we are searching for.  See
+	 if this is the version we should use.  */
+      if (((req_maj == -1) && (found == NULL
+	    || (found_maj > max_maj)
+	    || (found_maj == max_maj && (found_min > max_min))))
+	  || ((found_maj == req_maj) && (found_min >= req_min)
+	    && (found_min > max_min)))
+	{
+	  if (found != NULL)
+	    free (found);
+	  found = (char *) xmalloc (dirnamelen + strlen (entry->d_name) + 2);
+	  sprintf (found, "%s/%s", dirname, entry->d_name);
+	  max_maj = found_maj;
+	  max_min = found_min;
+	}
+    }
+
+  closedir (dir);
+
+  return found;
+}
+
+EOF
+    ;;
+esac
+cat >>e${EMULATION_NAME}.c <<EOF
+EOF
 # Import any needed special functions and/or overrides.
 #
 source_em ${srcdir}/emultempl/elf-generic.em
@@ -467,6 +696,25 @@ gld${EMULATION_NAME}_search_needed (const char *path,
     return FALSE;
 
   needed.by = n->by;
+EOF
+case ${target} in
+  *-*-openbsd* | *-*-bitrig*)
+    cat >>e${EMULATION_NAME}.c <<EOF
+
+  {
+    char *found;
+    if ((found = gld${EMULATION_NAME}_search_dir_needed(path, name)) != NULL) {
+      needed.name = found;
+      if (gld${EMULATION_NAME}_try_needed (&needed, force)) {
+       return TRUE;
+      }
+      free(found);
+    }
+  }
+
+EOF
+esac
+cat >>e${EMULATION_NAME}.c <<EOF
   needed.name = n->name;
 
   len = strlen (name);
@@ -619,7 +867,65 @@ gld${EMULATION_NAME}_check_ld_elf_hints (const char *n
 EOF
     # FreeBSD
     ;;
+    *-*-openbsd* | *-*-bitrig*)
+      fragment <<EOF
+/* Read the system search path the OpenBSD way. */
+#include <link.h>
 
+static bfd_boolean
+gld${EMULATION_NAME}_check_ld_elf_hints (const char *name, int force)
+{
+  static bfd_boolean initialized;
+  static char *ld_elf_hints;
+  struct dt_needed needed;
+
+  if (!initialized)
+    {
+      FILE *f;
+      char *tmppath;
+
+      tmppath = concat (ld_sysroot, _PATH_LD_HINTS, (const char *) NULL);
+      f = fopen (tmppath, FOPEN_RB);
+      free (tmppath);
+      if (f != NULL)
+	{
+	  struct hints_header hdr;
+
+	  if (fread (&hdr, 1, sizeof (hdr), f) == sizeof (hdr)
+	      && hdr.hh_magic == HH_MAGIC
+	      && hdr.hh_version == LD_HINTS_VERSION_2)
+	    {
+	      if (fseek (f, hdr.hh_strtab + hdr.hh_dirlist, SEEK_SET) != -1)
+		{
+		  char *b;
+		  uint dirmaxlen = hdr.hh_strtab_sz - hdr.hh_dirlist;
+
+		  b = xmalloc (dirmaxlen + 1);
+		  if (fread (b, 1, dirmaxlen, f) ==
+		      dirmaxlen)
+		    ld_elf_hints = gld${EMULATION_NAME}_add_sysroot (b);
+
+		  free (b);
+		}
+	    }
+	  fclose (f);
+	}
+
+      initialized = TRUE;
+    }
+
+  if (ld_elf_hints == NULL)
+    return FALSE;
+
+  needed.by = NULL;
+  needed.name = name;
+  return gld${EMULATION_NAME}_search_needed (ld_elf_hints, & needed,
+					     force);
+}
+EOF
+    # OpenBSD
+    ;;
+
     *-*-linux-* | *-*-k*bsd*-*)
       fragment <<EOF
 /* For a native linker, check the file /etc/ld.so.conf for directories
@@ -1302,7 +1608,7 @@ EOF
 fi
 if [ "x${USE_LIBPATH}" = xyes ] ; then
   case ${target} in
-    *-*-freebsd* | *-*-dragonfly*)
+    *-*-freebsd* | *-*-dragonfly* | *-*-openbsd* | *-*-bitrig*)
       fragment <<EOF
 	  if (gld${EMULATION_NAME}_check_ld_elf_hints (l->name, force))
 	    break;
@@ -1626,6 +1932,20 @@ gld${EMULATION_NAME}_open_dynamic_archive
 
   filename = entry->filename;
 
+EOF
+case ${target} in
+  *-*-openbsd* | *-*-bitrig*)
+    cat >>e${EMULATION_NAME}.c <<EOF
+  string = gld${EMULATION_NAME}_search_dir(search->name, filename, -1, -1);
+  if (string == NULL)
+    return FALSE;
+
+  arch = arch; /* gcc -Werror */
+EOF
+   ;;
+  *)
+    cat >>e${EMULATION_NAME}.c <<EOF
+
   /* This allocates a few bytes too many when EXTRA_SHLIB_EXTENSION
      is defined, but it does not seem worth the headache to optimize
      away those two bytes of space.  */
@@ -1639,6 +1959,11 @@ gld${EMULATION_NAME}_open_dynamic_archive
 
   sprintf (string, "%s/lib%s%s.so", search->name, filename, arch);
 
+EOF
+   ;;
+esac
+cat >>e${EMULATION_NAME}.c <<EOF
+
 #ifdef EXTRA_SHLIB_EXTENSION
   /* Try the .so extension first.  If that fails build a new filename
      using EXTRA_SHLIB_EXTENSION.  */
@@ -2008,9 +2333,13 @@ echo '  ; else if (link_info.pie && link_info.combrelo
 echo '             && link_info.relro' >> e${EMULATION_NAME}.c
 echo '             && (link_info.flags & DF_BIND_NOW)) return' >> e${EMULATION_NAME}.c
 sed $sc ldscripts/${EMULATION_NAME}.xdw			>> e${EMULATION_NAME}.c
+echo '  ; else if (link_info.pie && link_info.combreloc && config.data_bss_contig == TRUE) return' >> e${EMULATION_NAME}.c
+sed $sc ldscripts/${EMULATION_NAME}.xdcz                >> e${EMULATION_NAME}.c
 echo '  ; else if (link_info.pie && link_info.combreloc) return' >> e${EMULATION_NAME}.c
 sed $sc ldscripts/${EMULATION_NAME}.xdc			>> e${EMULATION_NAME}.c
 fi
+echo '  ; else if (link_info.pie && config.data_bss_contig == TRUE) return' >> e${EMULATION_NAME}.c
+sed $sc ldscripts/${EMULATION_NAME}.xdz                >> e${EMULATION_NAME}.c
 echo '  ; else if (link_info.pie) return'		>> e${EMULATION_NAME}.c
 sed $sc ldscripts/${EMULATION_NAME}.xd			>> e${EMULATION_NAME}.c
 fi
@@ -2064,11 +2393,16 @@ fragment <<EOF
   else if (link_info.pie && link_info.combreloc
 	   && link_info.relro && (link_info.flags & DF_BIND_NOW))
     return "ldscripts/${EMULATION_NAME}.xdw";
+
+  else if (link_info.pie && link_info.combreloc && config.data_bss_contig == TRUE)
+    return "ldscripts/${EMULATION_NAME}.xdcz";
   else if (link_info.pie && link_info.combreloc)
     return "ldscripts/${EMULATION_NAME}.xdc";
 EOF
 fi
 fragment <<EOF
+  else if (link_info.pie && config.data_bss_contig == TRUE)
+    return "ldscripts/${EMULATION_NAME}.xdz";
   else if (link_info.pie)
     return "ldscripts/${EMULATION_NAME}.xd";
 EOF
@@ -2088,6 +2422,10 @@ fragment <<EOF
     return "ldscripts/${EMULATION_NAME}.xs";
 EOF
 fi
+fragment <<EOF
+  else if (config.data_bss_contig == TRUE)
+    return "ldscripts/${EMULATION_NAME}.xz";
+EOF
 if test -n "$GENERATE_COMBRELOC_SCRIPT" ; then
 fragment <<EOF
   else if (link_info.combreloc && link_info.relro
