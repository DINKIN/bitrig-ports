$OpenBSD$
--- src/pkg/crypto/tls/handshake_server.go.orig	Mon Jan 21 19:30:18 2013
+++ src/pkg/crypto/tls/handshake_server.go	Mon Jan 21 19:35:13 2013
@@ -6,9 +6,11 @@ package tls
 
 import (
 	"crypto"
+	"crypto/ecdsa"
 	"crypto/rsa"
 	"crypto/subtle"
 	"crypto/x509"
+	"encoding/asn1"
 	"errors"
 	"io"
 )
@@ -308,7 +310,11 @@ func (hs *serverHandshakeState) doFullHandshake() erro
 	if config.ClientAuth >= RequestClientCert {
 		// Request a client certificate
 		certReq := new(certificateRequestMsg)
-		certReq.certificateTypes = []byte{certTypeRSASign}
+		certType := certTypeRSASign
+		if ka, ok := keyAgreement.(*ecdheKeyAgreement); ok && ka.sigType == ecdheSigECDSA {
+			certType = certTypeECDSASign
+		}
+		certReq.certificateTypes = []byte{byte(certType)}
 
 		// An empty list of certificateAuthorities signals to
 		// the client that it may send any certificate in response
@@ -326,7 +332,7 @@ func (hs *serverHandshakeState) doFullHandshake() erro
 	hs.finishedHash.Write(helloDone.marshal())
 	c.writeRecord(recordTypeHandshake, helloDone.marshal())
 
-	var pub *rsa.PublicKey // public key for client auth, if any
+	var pub crypto.PublicKey // public key for client auth, if any
 
 	msg, err := c.readHandshake()
 	if err != nil {
@@ -371,7 +377,7 @@ func (hs *serverHandshakeState) doFullHandshake() erro
 
 	// If we received a client cert in response to our certificate request message,
 	// the client will send us a certificateVerifyMsg immediately after the
-	// clientKeyExchangeMsg.  This message is a MD5SHA1 digest of all preceding
+	// clientKeyExchangeMsg.  This message is a digest of all preceding
 	// handshake-layer messages that is signed using the private key corresponding
 	// to the client's certificate. This allows us to verify that the client is in
 	// possession of the private key of the certificate.
@@ -386,9 +392,28 @@ func (hs *serverHandshakeState) doFullHandshake() erro
 		}
 
 		digest := make([]byte, 0, 36)
-		digest = hs.finishedHash.serverMD5.Sum(digest)
-		digest = hs.finishedHash.serverSHA1.Sum(digest)
-		err = rsa.VerifyPKCS1v15(pub, crypto.MD5SHA1, digest, certVerify.signature)
+		switch key := pub.(type) {
+		case *ecdsa.PublicKey:
+			ecdsaSig := new(ecdsaSignature)
+			if _, err = asn1.Unmarshal(certVerify.signature, ecdsaSig); err != nil {
+				break
+			}
+			if ecdsaSig.R.Sign() <= 0 || ecdsaSig.S.Sign() <= 0 {
+				err = errors.New("ECDSA signature contained zero or negative values")
+				break
+			}
+			// SHA1 digest - RFC4492 section 5.8.
+			digest = hs.finishedHash.serverSHA1.Sum(digest)
+			if !ecdsa.Verify(key, digest, ecdsaSig.R, ecdsaSig.S) {
+				err = errors.New("ECDSA verification failure")
+				break
+			}
+		case *rsa.PublicKey:
+			// MD5-SHA1 digest.
+			digest = hs.finishedHash.serverMD5.Sum(digest)
+			digest = hs.finishedHash.serverSHA1.Sum(digest)
+			err = rsa.VerifyPKCS1v15(key, crypto.MD5SHA1, digest, certVerify.signature)
+		}
 		if err != nil {
 			c.sendAlert(alertBadCertificate)
 			return errors.New("could not validate signature of connection nonces: " + err.Error())
@@ -508,7 +533,7 @@ func (hs *serverHandshakeState) sendFinished() error {
 // processCertsFromClient takes a chain of client certificates either from a
 // Certificates message or from a sessionState and verifies them. It returns
 // the public key of the leaf certificate.
-func (hs *serverHandshakeState) processCertsFromClient(certificates [][]byte) (*rsa.PublicKey, error) {
+func (hs *serverHandshakeState) processCertsFromClient(certificates [][]byte) (crypto.PublicKey, error) {
 	c := hs.c
 
 	hs.certsFromClient = certificates
@@ -555,8 +580,11 @@ func (hs *serverHandshakeState) processCertsFromClient
 	}
 
 	if len(certs) > 0 {
-		pub, ok := certs[0].PublicKey.(*rsa.PublicKey)
-		if !ok {
+		var pub crypto.PublicKey
+		switch key := certs[0].PublicKey.(type) {
+		case *ecdsa.PublicKey, *rsa.PublicKey:
+			pub = key
+		default:
 			return nil, c.sendAlert(alertUnsupportedCertificate)
 		}
 		c.peerCertificates = certs
