$OpenBSD$
--- src/pkg/crypto/tls/handshake_server_test.go.orig	Mon Jan 21 19:30:18 2013
+++ src/pkg/crypto/tls/handshake_server_test.go	Mon Jan 21 19:35:13 2013
@@ -6,6 +6,8 @@ package tls
 
 import (
 	"bytes"
+	"crypto/ecdsa"
+	"crypto/elliptic"
 	"crypto/rsa"
 	"crypto/x509"
 	"encoding/hex"
@@ -41,10 +43,10 @@ func init() {
 	testConfig.Time = func() time.Time { return time.Unix(0, 0) }
 	testConfig.Rand = zeroSource{}
 	testConfig.Certificates = make([]Certificate, 2)
-	testConfig.Certificates[0].Certificate = [][]byte{testCertificate}
-	testConfig.Certificates[0].PrivateKey = testPrivateKey
+	testConfig.Certificates[0].Certificate = [][]byte{testRSACertificate}
+	testConfig.Certificates[0].PrivateKey = testRSAPrivateKey
 	testConfig.Certificates[1].Certificate = [][]byte{testSNICertificate}
-	testConfig.Certificates[1].PrivateKey = testPrivateKey
+	testConfig.Certificates[1].PrivateKey = testRSAPrivateKey
 	testConfig.BuildNameToCertificate()
 	testConfig.CipherSuites = []uint16{TLS_RSA_WITH_RC4_128_SHA}
 	testConfig.InsecureSkipVerify = true
@@ -167,24 +169,35 @@ func testServerScript(t *testing.T, name string, serve
 	}
 }
 
-func TestHandshakeServerRC4(t *testing.T) {
-	testServerScript(t, "RC4", rc4ServerScript, testConfig, nil)
+func TestHandshakeServerRSARC4(t *testing.T) {
+	testServerScript(t, "RSA-RC4", rsaRC4ServerScript, testConfig, nil)
 }
 
-func TestHandshakeServer3DES(t *testing.T) {
+func TestHandshakeServerRSA3DES(t *testing.T) {
 	des3Config := new(Config)
 	*des3Config = *testConfig
 	des3Config.CipherSuites = []uint16{TLS_RSA_WITH_3DES_EDE_CBC_SHA}
-	testServerScript(t, "3DES", des3ServerScript, des3Config, nil)
+	testServerScript(t, "RSA-3DES", rsaDES3ServerScript, des3Config, nil)
 }
 
-func TestHandshakeServerAES(t *testing.T) {
+func TestHandshakeServerRSAAES(t *testing.T) {
 	aesConfig := new(Config)
 	*aesConfig = *testConfig
 	aesConfig.CipherSuites = []uint16{TLS_RSA_WITH_AES_128_CBC_SHA}
-	testServerScript(t, "AES", aesServerScript, aesConfig, nil)
+	testServerScript(t, "RSA-AES", rsaAESServerScript, aesConfig, nil)
 }
 
+func TestHandshakeServerECDHEECDSAAES(t *testing.T) {
+	ecdsaConfig := new(Config)
+	*ecdsaConfig = *testConfig
+	ecdsaConfig.Certificates = make([]Certificate, 1)
+	ecdsaConfig.Certificates[0].Certificate = [][]byte{testECDSACertificate}
+	ecdsaConfig.Certificates[0].PrivateKey = testECDSAPrivateKey
+	ecdsaConfig.BuildNameToCertificate()
+	ecdsaConfig.CipherSuites = []uint16{TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA}
+	testServerScript(t, "ECDHE-ECDSA-AES", ecdheECDSAAESServerScript, ecdsaConfig, nil)
+}
+
 func TestHandshakeServerSSLv3(t *testing.T) {
 	testServerScript(t, "SSLv3", sslv3ServerScript, testConfig, nil)
 }
@@ -208,8 +221,8 @@ type clientauthTest struct {
 	script     [][]byte
 }
 
-func TestClientAuth(t *testing.T) {
-	for _, cat := range clientauthTests {
+func TestClientAuthRSA(t *testing.T) {
+	for _, cat := range clientauthRSATests {
 		t.Log("running", cat.name)
 		cfg := new(Config)
 		*cfg = *testConfig
@@ -218,6 +231,21 @@ func TestClientAuth(t *testing.T) {
 	}
 }
 
+func TestClientAuthECDSA(t *testing.T) {
+	for _, cat := range clientauthECDSATests {
+		t.Log("running", cat.name)
+		cfg := new(Config)
+		*cfg = *testConfig
+		cfg.Certificates = make([]Certificate, 1)
+		cfg.Certificates[0].Certificate = [][]byte{testECDSACertificate}
+		cfg.Certificates[0].PrivateKey = testECDSAPrivateKey
+		cfg.BuildNameToCertificate()
+		cfg.CipherSuites = []uint16{TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA}
+		cfg.ClientAuth = cat.clientauth
+		testServerScript(t, cat.name, cat.script, cfg, cat.peers)
+	}
+}
+
 // recordingConn is a net.Conn that records the traffic that passes through it.
 // WriteTo can be used to produce Go code that contains the recorded traffic.
 type recordingConn struct {
@@ -291,6 +319,7 @@ var testClientAuth = flag.Int("clientauth", 0, "value 
 
 func GetTestConfig() *Config {
 	var config = *testConfig
+
 	suites := strings.Split(*testCipherSuites, ",")
 	config.CipherSuites = make([]uint16, len(suites))
 	for i := range suites {
@@ -301,6 +330,26 @@ func GetTestConfig() *Config {
 		config.CipherSuites[i] = uint16(suite)
 	}
 
+	ecdsa := false
+	for _, suite := range config.CipherSuites {
+		switch suite {
+		case TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
+			TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
+			TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
+			TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
+			ecdsa = true
+		}
+	}
+	if ecdsa {
+		config.Certificates = nil
+		if !*connect {
+			config.Certificates = make([]Certificate, 1)
+			config.Certificates[0].Certificate = [][]byte{testECDSACertificate}
+			config.Certificates[0].PrivateKey = testECDSAPrivateKey
+		}
+		config.BuildNameToCertificate()
+	}
+
 	config.ClientAuth = ClientAuthType(*testClientAuth)
 	return &config
 }
@@ -359,11 +408,13 @@ func fromHex(s string) []byte {
 	return b
 }
 
-var testCertificate = fromHex("308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9")
+var testRSACertificate = fromHex("308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9")
 
+var testECDSACertificate = fromHex("3082020030820162020900b8bf2d47a0d2ebf4300906072a8648ce3d04013045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3132313132323135303633325a170d3232313132303135303633325a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819b301006072a8648ce3d020106052b81040023038186000400c4a1edbe98f90b4873367ec316561122f23d53c33b4d213dcd6b75e6f6b0dc9adf26c1bcb287f072327cb3642f1c90bcea6823107efee325c0483a69e0286dd33700ef0462dd0da09c706283d881d36431aa9e9731bd96b068c09b23de76643f1a5c7fe9120e5858b65f70dd9bd8ead5d7f5d5ccb9b69f30665b669a20e227e5bffe3b300906072a8648ce3d040103818c0030818802420188a24febe245c5487d1bacf5ed989dae4770c05e1bb62fbdf1b64db76140d311a2ceee0b7e927eff769dc33b7ea53fcefa10e259ec472d7cacda4e970e15a06fd00242014dfcbe67139c2d050ebd3fa38c25c13313830d9406bbd4377af6ec7ac9862eddd711697f857c56defb31782be4c7780daecbbe9e4e3624317b6a0f399512078f2a")
+
 var testSNICertificate = fromHex("308201f23082015da003020102020100300b06092a864886f70d01010530283110300e060355040a130741636d6520436f311430120603550403130b736e69746573742e636f6d301e170d3132303431313137343033355a170d3133303431313137343533355a30283110300e060355040a130741636d6520436f311430120603550403130b736e69746573742e636f6d30819d300b06092a864886f70d01010103818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a3323030300e0603551d0f0101ff0404030200a0300d0603551d0e0406040401020304300f0603551d2304083006800401020304300b06092a864886f70d0101050381810089c6455f1c1f5ef8eb1ab174ee2439059f5c4259bb1a8d86cdb1d056f56a717da40e95ab90f59e8deaf627c157995094db0802266eb34fc6842dea8a4b68d9c1389103ab84fb9e1f85d9b5d23ff2312c8670fbb540148245a4ebafe264d90c8a4cf4f85b0fac12ac2fc4a3154bad52462868af96c62c6525d652b6e31845bdcc")
 
-var testPrivateKey = &rsa.PrivateKey{
+var testRSAPrivateKey = &rsa.PrivateKey{
 	PublicKey: rsa.PublicKey{
 		N: bigFromString("131650079503776001033793877885499001334664249354723305978524647182322416328664556247316495448366990052837680518067798333412266673813370895702118944398081598789828837447552603077848001020611640547221687072142537202428102790818451901395596882588063427854225330436740647715202971973145151161964464812406232198521"),
 		E: 65537,
@@ -375,6 +426,22 @@ var testPrivateKey = &rsa.PrivateKey{
 	},
 }
 
+var testECDSAPrivateKey = &ecdsa.PrivateKey{
+	PublicKey: ecdsa.PublicKey{
+		Curve: &elliptic.CurveParams{
+			P:       bigFromString("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151"),
+			N:       bigFromString("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449"),
+			B:       bigFromString("1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984"),
+			Gx:      bigFromString("2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846"),
+			Gy:      bigFromString("3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784"),
+			BitSize: 521,
+		},
+		X: bigFromString("2636411247892461147287360222306590634450676461695221912739908880441342231985950069527906976759812296359387337367668045707086543273113073382714101597903639351"),
+		Y: bigFromString("3204695818431246682253994090650952614555094516658732116404513121125038617915183037601737180082382202488628239201196033284060130040574800684774115478859677243"),
+	},
+	D: bigFromString("5477294338614160138026852784385529180817726002953041720191098180813046231640184669647735805135001309477695746518160084669446643325196003346204701381388769751"),
+}
+
 func loadPEMCert(in string) *x509.Certificate {
 	block, _ := pem.Decode([]byte(in))
 	if block.Type == "CERTIFICATE" && len(block.Headers) == 0 {
@@ -391,7 +458,7 @@ func loadPEMCert(in string) *x509.Certificate {
 // The values for this test are obtained by building and running in server mode:
 //   % go test -test.run "TestRunServer" -serve
 // The recorded bytes are written to stdout.
-var rc4ServerScript = [][]byte{
+var rsaRC4ServerScript = [][]byte{
 	{
 		0x16, 0x03, 0x01, 0x00, 0x54, 0x01, 0x00, 0x00,
 		0x50, 0x03, 0x01, 0x50, 0x77, 0x3d, 0xbd, 0x32,
@@ -548,7 +615,7 @@ var rc4ServerScript = [][]byte{
 	},
 }
 
-var des3ServerScript = [][]byte{
+var rsaDES3ServerScript = [][]byte{
 	{
 		0x16, 0x03, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00,
 		0xc1, 0x03, 0x03, 0x50, 0xae, 0x5d, 0x38, 0xec,
@@ -757,7 +824,7 @@ var des3ServerScript = [][]byte{
 	},
 }
 
-var aesServerScript = [][]byte{
+var rsaAESServerScript = [][]byte{
 	{
 		0x16, 0x03, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00,
 		0xc1, 0x03, 0x03, 0x50, 0xae, 0x5c, 0xe9, 0x5e,
@@ -983,6 +1050,216 @@ var aesServerScript = [][]byte{
 	},
 }
 
+// Generated using:
+// $ go test -test.run TestRunServer -serve -ciphersuites=0xc00a
+// $ openssl s_client -host 127.0.0.1 -port 10443 -cipher ECDHE-ECDSA-AES256-SHA
+var ecdheECDSAAESServerScript = [][]byte{
+	{
+		0x16, 0x03, 0x01, 0x00, 0xa0, 0x01, 0x00, 0x00,
+		0x9c, 0x03, 0x03, 0x50, 0xd7, 0x18, 0x31, 0x49,
+		0xde, 0x19, 0x8d, 0x08, 0x5c, 0x4b, 0x60, 0x67,
+		0x0f, 0xfe, 0xd0, 0x62, 0xf9, 0x31, 0x48, 0x17,
+		0x9e, 0x50, 0xc1, 0xd8, 0x35, 0x24, 0x0e, 0xa6,
+		0x09, 0x06, 0x51, 0x00, 0x00, 0x04, 0xc0, 0x0a,
+		0x00, 0xff, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x0b,
+		0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a,
+		0x00, 0x34, 0x00, 0x32, 0x00, 0x0e, 0x00, 0x0d,
+		0x00, 0x19, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x18,
+		0x00, 0x09, 0x00, 0x0a, 0x00, 0x16, 0x00, 0x17,
+		0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14,
+		0x00, 0x15, 0x00, 0x04, 0x00, 0x05, 0x00, 0x12,
+		0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,
+		0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x23,
+		0x00, 0x00, 0x00, 0x0d, 0x00, 0x22, 0x00, 0x20,
+		0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05, 0x01,
+		0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02,
+		0x04, 0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03,
+		0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x01, 0x01,
+		0x00, 0x0f, 0x00, 0x01, 0x01,
+	},
+	{
+		0x16, 0x03, 0x01, 0x00, 0x30, 0x02, 0x00, 0x00,
+		0x2c, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0xc0, 0x0a, 0x00, 0x00,
+		0x04, 0x00, 0x23, 0x00, 0x00, 0x16, 0x03, 0x01,
+		0x02, 0x0e, 0x0b, 0x00, 0x02, 0x0a, 0x00, 0x02,
+		0x07, 0x00, 0x02, 0x04, 0x30, 0x82, 0x02, 0x00,
+		0x30, 0x82, 0x01, 0x62, 0x02, 0x09, 0x00, 0xb8,
+		0xbf, 0x2d, 0x47, 0xa0, 0xd2, 0xeb, 0xf4, 0x30,
+		0x09, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,
+		0x04, 0x01, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09,
+		0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41,
+		0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
+		0x04, 0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65,
+		0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21,
+		0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
+		0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
+		0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74,
+		0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74,
+		0x64, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x32, 0x31,
+		0x31, 0x32, 0x32, 0x31, 0x35, 0x30, 0x36, 0x33,
+		0x32, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x31, 0x31,
+		0x32, 0x30, 0x31, 0x35, 0x30, 0x36, 0x33, 0x32,
+		0x5a, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09, 0x06,
+		0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55,
+		0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
+		0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d,
+		0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30,
+		0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x18,
+		0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
+		0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73,
+		0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64,
+		0x30, 0x81, 0x9b, 0x30, 0x10, 0x06, 0x07, 0x2a,
+		0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05,
+		0x2b, 0x81, 0x04, 0x00, 0x23, 0x03, 0x81, 0x86,
+		0x00, 0x04, 0x00, 0xc4, 0xa1, 0xed, 0xbe, 0x98,
+		0xf9, 0x0b, 0x48, 0x73, 0x36, 0x7e, 0xc3, 0x16,
+		0x56, 0x11, 0x22, 0xf2, 0x3d, 0x53, 0xc3, 0x3b,
+		0x4d, 0x21, 0x3d, 0xcd, 0x6b, 0x75, 0xe6, 0xf6,
+		0xb0, 0xdc, 0x9a, 0xdf, 0x26, 0xc1, 0xbc, 0xb2,
+		0x87, 0xf0, 0x72, 0x32, 0x7c, 0xb3, 0x64, 0x2f,
+		0x1c, 0x90, 0xbc, 0xea, 0x68, 0x23, 0x10, 0x7e,
+		0xfe, 0xe3, 0x25, 0xc0, 0x48, 0x3a, 0x69, 0xe0,
+		0x28, 0x6d, 0xd3, 0x37, 0x00, 0xef, 0x04, 0x62,
+		0xdd, 0x0d, 0xa0, 0x9c, 0x70, 0x62, 0x83, 0xd8,
+		0x81, 0xd3, 0x64, 0x31, 0xaa, 0x9e, 0x97, 0x31,
+		0xbd, 0x96, 0xb0, 0x68, 0xc0, 0x9b, 0x23, 0xde,
+		0x76, 0x64, 0x3f, 0x1a, 0x5c, 0x7f, 0xe9, 0x12,
+		0x0e, 0x58, 0x58, 0xb6, 0x5f, 0x70, 0xdd, 0x9b,
+		0xd8, 0xea, 0xd5, 0xd7, 0xf5, 0xd5, 0xcc, 0xb9,
+		0xb6, 0x9f, 0x30, 0x66, 0x5b, 0x66, 0x9a, 0x20,
+		0xe2, 0x27, 0xe5, 0xbf, 0xfe, 0x3b, 0x30, 0x09,
+		0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
+		0x01, 0x03, 0x81, 0x8c, 0x00, 0x30, 0x81, 0x88,
+		0x02, 0x42, 0x01, 0x88, 0xa2, 0x4f, 0xeb, 0xe2,
+		0x45, 0xc5, 0x48, 0x7d, 0x1b, 0xac, 0xf5, 0xed,
+		0x98, 0x9d, 0xae, 0x47, 0x70, 0xc0, 0x5e, 0x1b,
+		0xb6, 0x2f, 0xbd, 0xf1, 0xb6, 0x4d, 0xb7, 0x61,
+		0x40, 0xd3, 0x11, 0xa2, 0xce, 0xee, 0x0b, 0x7e,
+		0x92, 0x7e, 0xff, 0x76, 0x9d, 0xc3, 0x3b, 0x7e,
+		0xa5, 0x3f, 0xce, 0xfa, 0x10, 0xe2, 0x59, 0xec,
+		0x47, 0x2d, 0x7c, 0xac, 0xda, 0x4e, 0x97, 0x0e,
+		0x15, 0xa0, 0x6f, 0xd0, 0x02, 0x42, 0x01, 0x4d,
+		0xfc, 0xbe, 0x67, 0x13, 0x9c, 0x2d, 0x05, 0x0e,
+		0xbd, 0x3f, 0xa3, 0x8c, 0x25, 0xc1, 0x33, 0x13,
+		0x83, 0x0d, 0x94, 0x06, 0xbb, 0xd4, 0x37, 0x7a,
+		0xf6, 0xec, 0x7a, 0xc9, 0x86, 0x2e, 0xdd, 0xd7,
+		0x11, 0x69, 0x7f, 0x85, 0x7c, 0x56, 0xde, 0xfb,
+		0x31, 0x78, 0x2b, 0xe4, 0xc7, 0x78, 0x0d, 0xae,
+		0xcb, 0xbe, 0x9e, 0x4e, 0x36, 0x24, 0x31, 0x7b,
+		0x6a, 0x0f, 0x39, 0x95, 0x12, 0x07, 0x8f, 0x2a,
+		0x16, 0x03, 0x01, 0x01, 0x1a, 0x0c, 0x00, 0x01,
+		0x16, 0x03, 0x00, 0x19, 0x85, 0x04, 0x01, 0x39,
+		0xdc, 0xee, 0x44, 0x17, 0x5e, 0xdb, 0xd7, 0x27,
+		0xaf, 0xb6, 0x56, 0xd9, 0xb4, 0x43, 0x5a, 0x99,
+		0xcf, 0xaa, 0x31, 0x37, 0x0c, 0x6f, 0x3a, 0xa0,
+		0xf8, 0x53, 0xc4, 0x74, 0xd1, 0x91, 0x0a, 0x46,
+		0xf5, 0x38, 0x3b, 0x5c, 0x09, 0xd8, 0x97, 0xdc,
+		0x4b, 0xaa, 0x70, 0x26, 0x48, 0xf2, 0xd6, 0x0b,
+		0x31, 0xc9, 0xf8, 0xd4, 0x98, 0x43, 0xe1, 0x6c,
+		0xd5, 0xc7, 0xb2, 0x8e, 0x0b, 0x01, 0xe6, 0xb6,
+		0x00, 0x28, 0x80, 0x7b, 0xfc, 0x96, 0x8f, 0x0d,
+		0xa2, 0x4f, 0xb0, 0x79, 0xaf, 0xdc, 0x61, 0x28,
+		0x63, 0x33, 0x78, 0xf6, 0x31, 0x39, 0xfd, 0x8a,
+		0xf4, 0x15, 0x18, 0x11, 0xfe, 0xdb, 0xd5, 0x07,
+		0xda, 0x2c, 0xed, 0x49, 0xa0, 0x23, 0xbf, 0xd0,
+		0x3a, 0x38, 0x1d, 0x54, 0xae, 0x1c, 0x7b, 0xea,
+		0x29, 0xee, 0xd0, 0x38, 0xc1, 0x76, 0xa7, 0x7f,
+		0x2a, 0xf4, 0xce, 0x1e, 0xac, 0xcc, 0x94, 0x79,
+		0x90, 0x33, 0x00, 0x8b, 0x30, 0x81, 0x88, 0x02,
+		0x42, 0x00, 0xc6, 0x85, 0x8e, 0x06, 0xb7, 0x04,
+		0x04, 0xe9, 0xcd, 0x9e, 0x3e, 0xcb, 0x66, 0x23,
+		0x95, 0xb4, 0x42, 0x9c, 0x64, 0x81, 0x39, 0x05,
+		0x3f, 0xb5, 0x21, 0xf8, 0x28, 0xaf, 0x60, 0x6b,
+		0x4d, 0x3d, 0xba, 0xa1, 0x4b, 0x5e, 0x77, 0xef,
+		0xe7, 0x59, 0x28, 0xfe, 0x1d, 0xc1, 0x27, 0xa2,
+		0xff, 0xa8, 0xde, 0x33, 0x48, 0xb3, 0xc1, 0x85,
+		0x6a, 0x42, 0x9b, 0xf9, 0x7e, 0x7e, 0x31, 0xc2,
+		0xe5, 0xbd, 0x66, 0x02, 0x42, 0x00, 0xad, 0x7d,
+		0x06, 0x35, 0xab, 0xec, 0x8d, 0xac, 0xd4, 0xba,
+		0x1b, 0x49, 0x5e, 0x05, 0x5f, 0xf0, 0x97, 0x93,
+		0x82, 0xb8, 0x2b, 0x8d, 0x91, 0x98, 0x63, 0x8e,
+		0xb4, 0x14, 0x62, 0xdb, 0x1e, 0xc9, 0x2b, 0x30,
+		0xf8, 0x41, 0x9b, 0xa6, 0xe6, 0xbc, 0xde, 0x0e,
+		0x68, 0x30, 0x22, 0x50, 0xe6, 0x98, 0x97, 0x7b,
+		0x69, 0xf7, 0x93, 0xed, 0xcd, 0x19, 0x2f, 0x44,
+		0x6c, 0x2e, 0xdf, 0x25, 0xee, 0xcc, 0x46, 0x16,
+		0x03, 0x01, 0x00, 0x04, 0x0e, 0x00, 0x00, 0x00,
+	},
+	{
+		0x16, 0x03, 0x01, 0x00, 0x8a, 0x10, 0x00, 0x00,
+		0x86, 0x85, 0x04, 0x00, 0x1c, 0xc5, 0xe8, 0xb3,
+		0x42, 0xb4, 0xad, 0xca, 0x45, 0xcd, 0x42, 0x7b,
+		0xfb, 0x0c, 0xea, 0x32, 0x26, 0xd4, 0x8a, 0xef,
+		0xdf, 0xc9, 0xff, 0xd2, 0xe0, 0x36, 0xea, 0x4e,
+		0xbb, 0x3e, 0xf4, 0x9c, 0x76, 0x4f, 0x44, 0xbd,
+		0x84, 0x72, 0xdd, 0xcb, 0xe5, 0x28, 0x8d, 0x31,
+		0x72, 0x3b, 0xd3, 0xf2, 0x9a, 0x13, 0xfb, 0x8a,
+		0xa7, 0x72, 0xca, 0x21, 0x6c, 0xea, 0xbf, 0xe9,
+		0x8c, 0x0a, 0xcc, 0x8f, 0xd6, 0x00, 0x20, 0x87,
+		0xf3, 0x7d, 0x18, 0xc5, 0xfd, 0x9e, 0xdd, 0x6b,
+		0x06, 0xdc, 0x52, 0xeb, 0x14, 0xc0, 0x67, 0x5a,
+		0x06, 0xd8, 0x98, 0x19, 0x14, 0xe7, 0xd4, 0x36,
+		0x32, 0xee, 0xb7, 0xfa, 0xe2, 0x85, 0x4a, 0x16,
+		0x42, 0x0c, 0xa6, 0x21, 0xcf, 0x1f, 0xae, 0x10,
+		0x8b, 0x28, 0x32, 0x19, 0xa4, 0x0a, 0xd7, 0xce,
+		0xe6, 0xe1, 0x93, 0xfb, 0x5f, 0x08, 0x8b, 0x42,
+		0xa2, 0x20, 0xed, 0x0d, 0x62, 0xca, 0xed, 0x14,
+		0x03, 0x01, 0x00, 0x01, 0x01, 0x16, 0x03, 0x01,
+		0x00, 0x30, 0x2e, 0x33, 0xc0, 0x57, 0x6c, 0xb4,
+		0x1b, 0xd2, 0x63, 0xe8, 0x67, 0x10, 0x2d, 0x87,
+		0x71, 0x6e, 0x19, 0x60, 0xf4, 0xa4, 0x10, 0x52,
+		0x73, 0x2d, 0x09, 0x5e, 0xdb, 0x6c, 0xdc, 0xcf,
+		0x2d, 0xff, 0x03, 0x11, 0x95, 0x76, 0x90, 0xd7,
+		0x87, 0x54, 0x43, 0xed, 0xc2, 0x36, 0x69, 0x14,
+		0x72, 0x4a,
+	},
+	{
+		0x16, 0x03, 0x01, 0x00, 0x72, 0x04, 0x00, 0x00,
+		0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
+		0xe8, 0x8b, 0xde, 0xef, 0xba, 0xc5, 0x7e, 0x04,
+		0xab, 0xfd, 0x79, 0x56, 0xf3, 0xe1, 0xa5, 0x3e,
+		0x02, 0xdf, 0x69, 0x6d, 0x1f, 0x41, 0x9f, 0xbc,
+		0x93, 0xe2, 0x6c, 0xf1, 0xb1, 0x38, 0xf5, 0x2b,
+		0x8c, 0x4c, 0xf4, 0x74, 0xe1, 0x79, 0x35, 0x34,
+		0x97, 0x9b, 0xd5, 0xba, 0xfd, 0xf7, 0x2f, 0x2d,
+		0x9e, 0x84, 0x54, 0xee, 0x77, 0x59, 0x23, 0x8f,
+		0xc8, 0x84, 0xb4, 0xd6, 0xea, 0x4c, 0x44, 0x8a,
+		0xc6, 0x9c, 0xf9, 0x9b, 0x27, 0xea, 0x4f, 0x28,
+		0x72, 0x33, 0x12, 0x20, 0x7c, 0xd7, 0x3f, 0x56,
+		0xa6, 0x76, 0xc7, 0x48, 0xe4, 0x2d, 0x6f, 0x14,
+		0x03, 0x01, 0x00, 0x01, 0x01, 0x16, 0x03, 0x01,
+		0x00, 0x30, 0x36, 0xe3, 0xd4, 0xf7, 0xb1, 0x69,
+		0x18, 0x8d, 0x09, 0xba, 0x52, 0x1e, 0xd5, 0x7d,
+		0x2c, 0x15, 0x3a, 0xd6, 0xe3, 0x99, 0x30, 0x2c,
+		0x99, 0x97, 0xbc, 0x19, 0x3c, 0x63, 0xa1, 0x25,
+		0x68, 0xbc, 0x8a, 0x16, 0x47, 0xec, 0xae, 0x13,
+		0xa4, 0x03, 0x96, 0x29, 0x11, 0x92, 0x90, 0x1a,
+		0xc8, 0xa4, 0x17, 0x03, 0x01, 0x00, 0x20, 0xc1,
+		0x10, 0x1d, 0xa6, 0xf1, 0xe2, 0x8a, 0xcc, 0x37,
+		0x7d, 0x8e, 0x05, 0x00, 0xfb, 0xd1, 0x9f, 0xc7,
+		0x11, 0xd2, 0x00, 0xb4, 0x27, 0x0a, 0x25, 0x14,
+		0xd9, 0x79, 0x1b, 0xcb, 0x4d, 0x81, 0x61, 0x17,
+		0x03, 0x01, 0x00, 0x30, 0x5c, 0x7c, 0x2d, 0xc0,
+		0x9e, 0xa6, 0xc4, 0x8e, 0xfd, 0xf4, 0xe2, 0xe5,
+		0xe4, 0xe6, 0x56, 0x9f, 0x7d, 0x4c, 0x4c, 0x2d,
+		0xb7, 0xa9, 0xac, 0xfa, 0x9f, 0x12, 0x7f, 0x2d,
+		0x30, 0x57, 0xe4, 0x8e, 0x30, 0x86, 0x65, 0x59,
+		0xcd, 0x24, 0xda, 0xe2, 0x8a, 0x7b, 0x0c, 0x5e,
+		0x86, 0x05, 0x06, 0x2a, 0x15, 0x03, 0x01, 0x00,
+		0x20, 0xd6, 0xb7, 0x70, 0xf8, 0x47, 0xbc, 0x0f,
+		0xf4, 0x66, 0x98, 0x1b, 0x1e, 0x8a, 0x8c, 0x0b,
+		0xa1, 0x4a, 0x04, 0x29, 0x60, 0x72, 0x8b, 0xc4,
+		0x73, 0xc1, 0xd6, 0x41, 0x72, 0xb7, 0x17, 0x39,
+		0xda,
+	},
+}
+
 var sslv3ServerScript = [][]byte{
 	{
 		0x16, 0x03, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00,
@@ -1515,7 +1792,7 @@ var serverResumeTest = [][]byte{
 	},
 }
 
-var clientauthTests = []clientauthTest{
+var clientauthRSATests = []clientauthTest{
 	// Server asks for cert with empty CA list, client doesn't give it.
 	// go test -run "TestRunServer" -serve -clientauth 1
 	{"RequestClientCert, none given", RequestClientCert, nil, [][]byte{
@@ -1918,6 +2195,371 @@ var clientauthTests = []clientauthTest{
 	}},
 }
 
+var clientauthECDSATests = []clientauthTest{
+	// Server asks for cert with empty CA list, client gives one
+	//   go test -run "TestRunServer" -serve \
+	//     -clientauth 1 -ciphersuites=0xc00a
+	//   openssl s_client -host 127.0.0.1 -port 10443 \
+	//     -cipher ECDHE-ECDSA-AES256-SHA -key client.key -cert client.crt
+	{"RequestClientCert, client gives it", RequestClientCert, []*x509.Certificate{clientECDSACertificate}, [][]byte{
+
+		{
+			0x16, 0x03, 0x01, 0x00, 0xa0, 0x01, 0x00, 0x00,
+			0x9c, 0x03, 0x03, 0x50, 0xd7, 0x3e, 0x0a, 0xa3,
+			0x65, 0x3b, 0x1e, 0x84, 0xc6, 0x45, 0xb9, 0x89,
+			0xaa, 0x32, 0x67, 0x83, 0xd6, 0xb7, 0xe6, 0x22,
+			0x79, 0x2c, 0xfb, 0xb4, 0x77, 0x89, 0xb0, 0x7b,
+			0xf7, 0x10, 0xf1, 0x00, 0x00, 0x04, 0xc0, 0x0a,
+			0x00, 0xff, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x0b,
+			0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a,
+			0x00, 0x34, 0x00, 0x32, 0x00, 0x0e, 0x00, 0x0d,
+			0x00, 0x19, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x18,
+			0x00, 0x09, 0x00, 0x0a, 0x00, 0x16, 0x00, 0x17,
+			0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14,
+			0x00, 0x15, 0x00, 0x04, 0x00, 0x05, 0x00, 0x12,
+			0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,
+			0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x23,
+			0x00, 0x00, 0x00, 0x0d, 0x00, 0x22, 0x00, 0x20,
+			0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05, 0x01,
+			0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02,
+			0x04, 0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03,
+			0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x01, 0x01,
+			0x00, 0x0f, 0x00, 0x01, 0x01,
+		},
+		{
+			0x16, 0x03, 0x01, 0x00, 0x30, 0x02, 0x00, 0x00,
+			0x2c, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0xc0, 0x0a, 0x00, 0x00,
+			0x04, 0x00, 0x23, 0x00, 0x00, 0x16, 0x03, 0x01,
+			0x02, 0x0e, 0x0b, 0x00, 0x02, 0x0a, 0x00, 0x02,
+			0x07, 0x00, 0x02, 0x04, 0x30, 0x82, 0x02, 0x00,
+			0x30, 0x82, 0x01, 0x62, 0x02, 0x09, 0x00, 0xb8,
+			0xbf, 0x2d, 0x47, 0xa0, 0xd2, 0xeb, 0xf4, 0x30,
+			0x09, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,
+			0x04, 0x01, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09,
+			0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41,
+			0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
+			0x04, 0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65,
+			0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21,
+			0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
+			0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
+			0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74,
+			0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74,
+			0x64, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x32, 0x31,
+			0x31, 0x32, 0x32, 0x31, 0x35, 0x30, 0x36, 0x33,
+			0x32, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x31, 0x31,
+			0x32, 0x30, 0x31, 0x35, 0x30, 0x36, 0x33, 0x32,
+			0x5a, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09, 0x06,
+			0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55,
+			0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
+			0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d,
+			0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30,
+			0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x18,
+			0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
+			0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73,
+			0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64,
+			0x30, 0x81, 0x9b, 0x30, 0x10, 0x06, 0x07, 0x2a,
+			0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05,
+			0x2b, 0x81, 0x04, 0x00, 0x23, 0x03, 0x81, 0x86,
+			0x00, 0x04, 0x00, 0xc4, 0xa1, 0xed, 0xbe, 0x98,
+			0xf9, 0x0b, 0x48, 0x73, 0x36, 0x7e, 0xc3, 0x16,
+			0x56, 0x11, 0x22, 0xf2, 0x3d, 0x53, 0xc3, 0x3b,
+			0x4d, 0x21, 0x3d, 0xcd, 0x6b, 0x75, 0xe6, 0xf6,
+			0xb0, 0xdc, 0x9a, 0xdf, 0x26, 0xc1, 0xbc, 0xb2,
+			0x87, 0xf0, 0x72, 0x32, 0x7c, 0xb3, 0x64, 0x2f,
+			0x1c, 0x90, 0xbc, 0xea, 0x68, 0x23, 0x10, 0x7e,
+			0xfe, 0xe3, 0x25, 0xc0, 0x48, 0x3a, 0x69, 0xe0,
+			0x28, 0x6d, 0xd3, 0x37, 0x00, 0xef, 0x04, 0x62,
+			0xdd, 0x0d, 0xa0, 0x9c, 0x70, 0x62, 0x83, 0xd8,
+			0x81, 0xd3, 0x64, 0x31, 0xaa, 0x9e, 0x97, 0x31,
+			0xbd, 0x96, 0xb0, 0x68, 0xc0, 0x9b, 0x23, 0xde,
+			0x76, 0x64, 0x3f, 0x1a, 0x5c, 0x7f, 0xe9, 0x12,
+			0x0e, 0x58, 0x58, 0xb6, 0x5f, 0x70, 0xdd, 0x9b,
+			0xd8, 0xea, 0xd5, 0xd7, 0xf5, 0xd5, 0xcc, 0xb9,
+			0xb6, 0x9f, 0x30, 0x66, 0x5b, 0x66, 0x9a, 0x20,
+			0xe2, 0x27, 0xe5, 0xbf, 0xfe, 0x3b, 0x30, 0x09,
+			0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
+			0x01, 0x03, 0x81, 0x8c, 0x00, 0x30, 0x81, 0x88,
+			0x02, 0x42, 0x01, 0x88, 0xa2, 0x4f, 0xeb, 0xe2,
+			0x45, 0xc5, 0x48, 0x7d, 0x1b, 0xac, 0xf5, 0xed,
+			0x98, 0x9d, 0xae, 0x47, 0x70, 0xc0, 0x5e, 0x1b,
+			0xb6, 0x2f, 0xbd, 0xf1, 0xb6, 0x4d, 0xb7, 0x61,
+			0x40, 0xd3, 0x11, 0xa2, 0xce, 0xee, 0x0b, 0x7e,
+			0x92, 0x7e, 0xff, 0x76, 0x9d, 0xc3, 0x3b, 0x7e,
+			0xa5, 0x3f, 0xce, 0xfa, 0x10, 0xe2, 0x59, 0xec,
+			0x47, 0x2d, 0x7c, 0xac, 0xda, 0x4e, 0x97, 0x0e,
+			0x15, 0xa0, 0x6f, 0xd0, 0x02, 0x42, 0x01, 0x4d,
+			0xfc, 0xbe, 0x67, 0x13, 0x9c, 0x2d, 0x05, 0x0e,
+			0xbd, 0x3f, 0xa3, 0x8c, 0x25, 0xc1, 0x33, 0x13,
+			0x83, 0x0d, 0x94, 0x06, 0xbb, 0xd4, 0x37, 0x7a,
+			0xf6, 0xec, 0x7a, 0xc9, 0x86, 0x2e, 0xdd, 0xd7,
+			0x11, 0x69, 0x7f, 0x85, 0x7c, 0x56, 0xde, 0xfb,
+			0x31, 0x78, 0x2b, 0xe4, 0xc7, 0x78, 0x0d, 0xae,
+			0xcb, 0xbe, 0x9e, 0x4e, 0x36, 0x24, 0x31, 0x7b,
+			0x6a, 0x0f, 0x39, 0x95, 0x12, 0x07, 0x8f, 0x2a,
+			0x16, 0x03, 0x01, 0x01, 0x1a, 0x0c, 0x00, 0x01,
+			0x16, 0x03, 0x00, 0x19, 0x85, 0x04, 0x01, 0x39,
+			0xdc, 0xee, 0x44, 0x17, 0x5e, 0xdb, 0xd7, 0x27,
+			0xaf, 0xb6, 0x56, 0xd9, 0xb4, 0x43, 0x5a, 0x99,
+			0xcf, 0xaa, 0x31, 0x37, 0x0c, 0x6f, 0x3a, 0xa0,
+			0xf8, 0x53, 0xc4, 0x74, 0xd1, 0x91, 0x0a, 0x46,
+			0xf5, 0x38, 0x3b, 0x5c, 0x09, 0xd8, 0x97, 0xdc,
+			0x4b, 0xaa, 0x70, 0x26, 0x48, 0xf2, 0xd6, 0x0b,
+			0x31, 0xc9, 0xf8, 0xd4, 0x98, 0x43, 0xe1, 0x6c,
+			0xd5, 0xc7, 0xb2, 0x8e, 0x0b, 0x01, 0xe6, 0xb6,
+			0x00, 0x28, 0x80, 0x7b, 0xfc, 0x96, 0x8f, 0x0d,
+			0xa2, 0x4f, 0xb0, 0x79, 0xaf, 0xdc, 0x61, 0x28,
+			0x63, 0x33, 0x78, 0xf6, 0x31, 0x39, 0xfd, 0x8a,
+			0xf4, 0x15, 0x18, 0x11, 0xfe, 0xdb, 0xd5, 0x07,
+			0xda, 0x2c, 0xed, 0x49, 0xa0, 0x23, 0xbf, 0xd0,
+			0x3a, 0x38, 0x1d, 0x54, 0xae, 0x1c, 0x7b, 0xea,
+			0x29, 0xee, 0xd0, 0x38, 0xc1, 0x76, 0xa7, 0x7f,
+			0x2a, 0xf4, 0xce, 0x1e, 0xac, 0xcc, 0x94, 0x79,
+			0x90, 0x33, 0x00, 0x8b, 0x30, 0x81, 0x88, 0x02,
+			0x42, 0x00, 0xc6, 0x85, 0x8e, 0x06, 0xb7, 0x04,
+			0x04, 0xe9, 0xcd, 0x9e, 0x3e, 0xcb, 0x66, 0x23,
+			0x95, 0xb4, 0x42, 0x9c, 0x64, 0x81, 0x39, 0x05,
+			0x3f, 0xb5, 0x21, 0xf8, 0x28, 0xaf, 0x60, 0x6b,
+			0x4d, 0x3d, 0xba, 0xa1, 0x4b, 0x5e, 0x77, 0xef,
+			0xe7, 0x59, 0x28, 0xfe, 0x1d, 0xc1, 0x27, 0xa2,
+			0xff, 0xa8, 0xde, 0x33, 0x48, 0xb3, 0xc1, 0x85,
+			0x6a, 0x42, 0x9b, 0xf9, 0x7e, 0x7e, 0x31, 0xc2,
+			0xe5, 0xbd, 0x66, 0x02, 0x42, 0x00, 0xad, 0x7d,
+			0x06, 0x35, 0xab, 0xec, 0x8d, 0xac, 0xd4, 0xba,
+			0x1b, 0x49, 0x5e, 0x05, 0x5f, 0xf0, 0x97, 0x93,
+			0x82, 0xb8, 0x2b, 0x8d, 0x91, 0x98, 0x63, 0x8e,
+			0xb4, 0x14, 0x62, 0xdb, 0x1e, 0xc9, 0x2b, 0x30,
+			0xf8, 0x41, 0x9b, 0xa6, 0xe6, 0xbc, 0xde, 0x0e,
+			0x68, 0x30, 0x22, 0x2a, 0x0a, 0xce, 0x58, 0x3d,
+			0x31, 0xc6, 0xd8, 0x9e, 0xe9, 0x20, 0x24, 0xf5,
+			0x2a, 0xe1, 0x00, 0x90, 0x99, 0x03, 0x18, 0x16,
+			0x03, 0x01, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x04,
+			0x01, 0x40, 0x00, 0x00, 0x16, 0x03, 0x01, 0x00,
+			0x04, 0x0e, 0x00, 0x00, 0x00,
+		},
+		{
+			0x16, 0x03, 0x01, 0x02, 0x0a, 0x0b, 0x00, 0x02,
+			0x06, 0x00, 0x02, 0x03, 0x00, 0x02, 0x00, 0x30,
+			0x82, 0x01, 0xfc, 0x30, 0x82, 0x01, 0x5e, 0x02,
+			0x09, 0x00, 0x9a, 0x30, 0x84, 0x6c, 0x26, 0x35,
+			0xd9, 0x17, 0x30, 0x09, 0x06, 0x07, 0x2a, 0x86,
+			0x48, 0xce, 0x3d, 0x04, 0x01, 0x30, 0x45, 0x31,
+			0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
+			0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11,
+			0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x53,
+			0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74,
+			0x65, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,
+			0x04, 0x0a, 0x13, 0x18, 0x49, 0x6e, 0x74, 0x65,
+			0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64,
+			0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79,
+			0x20, 0x4c, 0x74, 0x64, 0x30, 0x1e, 0x17, 0x0d,
+			0x31, 0x32, 0x31, 0x31, 0x31, 0x34, 0x31, 0x33,
+			0x32, 0x35, 0x35, 0x33, 0x5a, 0x17, 0x0d, 0x32,
+			0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32,
+			0x35, 0x35, 0x33, 0x5a, 0x30, 0x41, 0x31, 0x0b,
+			0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
+			0x02, 0x41, 0x55, 0x31, 0x0c, 0x30, 0x0a, 0x06,
+			0x03, 0x55, 0x04, 0x08, 0x13, 0x03, 0x4e, 0x53,
+			0x57, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55,
+			0x04, 0x07, 0x13, 0x07, 0x50, 0x79, 0x72, 0x6d,
+			0x6f, 0x6e, 0x74, 0x31, 0x12, 0x30, 0x10, 0x06,
+			0x03, 0x55, 0x04, 0x03, 0x13, 0x09, 0x4a, 0x6f,
+			0x65, 0x6c, 0x20, 0x53, 0x69, 0x6e, 0x67, 0x30,
+			0x81, 0x9b, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86,
+			0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b,
+			0x81, 0x04, 0x00, 0x23, 0x03, 0x81, 0x86, 0x00,
+			0x04, 0x00, 0x95, 0x8c, 0x91, 0x75, 0x14, 0xc0,
+			0x5e, 0xc4, 0x57, 0xb4, 0xd4, 0xc3, 0x6f, 0x8d,
+			0xae, 0x68, 0x1e, 0xdd, 0x6f, 0xce, 0x86, 0xe1,
+			0x7e, 0x6e, 0xb2, 0x48, 0x3e, 0x81, 0xe5, 0x4e,
+			0xe2, 0xc6, 0x88, 0x4b, 0x64, 0xdc, 0xf5, 0x30,
+			0xbb, 0xd3, 0xff, 0x65, 0xcc, 0x5b, 0xf4, 0xdd,
+			0xb5, 0x6a, 0x3e, 0x3e, 0xd0, 0x1d, 0xde, 0x47,
+			0xc3, 0x76, 0xad, 0x19, 0xf6, 0x45, 0x2c, 0x8c,
+			0xbc, 0xd8, 0x1d, 0x01, 0x4c, 0x1f, 0x70, 0x90,
+			0x46, 0x76, 0x48, 0x8b, 0x8f, 0x83, 0xcc, 0x4a,
+			0x5c, 0x8f, 0x40, 0x76, 0xda, 0xe0, 0x89, 0xec,
+			0x1d, 0x2b, 0xc4, 0x4e, 0x30, 0x76, 0x28, 0x41,
+			0xb2, 0x62, 0xa8, 0xfb, 0x5b, 0xf1, 0xf9, 0x4e,
+			0x7a, 0x8d, 0xbd, 0x09, 0xb8, 0xae, 0xea, 0x8b,
+			0x18, 0x27, 0x4f, 0x2e, 0x70, 0xfe, 0x13, 0x96,
+			0xba, 0xc3, 0xd3, 0x40, 0x16, 0xcd, 0x65, 0x4e,
+			0xac, 0x11, 0x1e, 0xe6, 0xf1, 0x30, 0x09, 0x06,
+			0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x01,
+			0x03, 0x81, 0x8c, 0x00, 0x30, 0x81, 0x88, 0x02,
+			0x42, 0x00, 0xe0, 0x14, 0xc4, 0x60, 0x60, 0x0b,
+			0x72, 0x68, 0xb0, 0x32, 0x5d, 0x61, 0x4a, 0x02,
+			0x74, 0x5c, 0xc2, 0x81, 0xb9, 0x16, 0xa8, 0x3f,
+			0x29, 0xc8, 0x36, 0xc7, 0x81, 0xff, 0x6c, 0xb6,
+			0x5b, 0xd9, 0x70, 0xf1, 0x38, 0x3b, 0x50, 0x48,
+			0x28, 0x94, 0xcb, 0x09, 0x1a, 0x52, 0xf1, 0x5d,
+			0xee, 0x8d, 0xf2, 0xb9, 0xf0, 0xf0, 0xda, 0xd9,
+			0x15, 0x3a, 0xf9, 0xbd, 0x03, 0x7a, 0x87, 0xa2,
+			0x23, 0x35, 0xec, 0x02, 0x42, 0x01, 0xa3, 0xd4,
+			0x8a, 0x78, 0x35, 0x1c, 0x4a, 0x9a, 0x23, 0xd2,
+			0x0a, 0xbe, 0x2b, 0x10, 0x31, 0x9d, 0x9c, 0x5f,
+			0xbe, 0xe8, 0x91, 0xb3, 0xda, 0x1a, 0xf5, 0x5d,
+			0xa3, 0x23, 0xf5, 0x26, 0x8b, 0x45, 0x70, 0x8d,
+			0x65, 0x62, 0x9b, 0x7e, 0x01, 0x99, 0x3d, 0x18,
+			0xf6, 0x10, 0x9a, 0x38, 0x61, 0x9b, 0x2e, 0x57,
+			0xe4, 0xfa, 0xcc, 0xb1, 0x8a, 0xce, 0xe2, 0x23,
+			0xa0, 0x87, 0xf0, 0xe1, 0x67, 0x51, 0xeb, 0x16,
+			0x03, 0x01, 0x00, 0x8a, 0x10, 0x00, 0x00, 0x86,
+			0x85, 0x04, 0x01, 0xcb, 0x6e, 0x57, 0xd9, 0xcb,
+			0xd0, 0xea, 0xde, 0xb7, 0x57, 0xb4, 0x74, 0xd8,
+			0x0f, 0x0a, 0x81, 0xe5, 0x17, 0x46, 0xd9, 0x5b,
+			0xa1, 0xcb, 0x89, 0x16, 0xb5, 0x4f, 0x7a, 0xc5,
+			0x69, 0x3a, 0x55, 0xab, 0x13, 0x70, 0x79, 0x45,
+			0x3c, 0x18, 0xcf, 0x5b, 0x07, 0x43, 0xe2, 0x99,
+			0x50, 0x66, 0x76, 0xe4, 0xea, 0xeb, 0xaa, 0xef,
+			0x2e, 0xa2, 0x19, 0x1a, 0x9a, 0x90, 0xd2, 0x4d,
+			0x90, 0xef, 0x11, 0x5d, 0x01, 0xfc, 0xfa, 0x4d,
+			0xeb, 0xc1, 0x86, 0x8e, 0xdd, 0xef, 0xad, 0x80,
+			0x11, 0x54, 0x90, 0x50, 0xc8, 0xc7, 0xa6, 0x96,
+			0x18, 0xc7, 0x03, 0x3c, 0xcc, 0x6d, 0x97, 0xe9,
+			0x5a, 0xd6, 0x94, 0xea, 0xdd, 0x9d, 0xf2, 0x6d,
+			0xe5, 0xd2, 0xc7, 0xa4, 0x20, 0x01, 0xa6, 0xab,
+			0x65, 0x72, 0x53, 0xad, 0x8b, 0x9f, 0xa1, 0x5c,
+			0xdc, 0x15, 0x69, 0x8b, 0x79, 0xba, 0x0c, 0x25,
+			0x64, 0x20, 0x29, 0x49, 0x15, 0x4c, 0x16, 0x03,
+			0x01, 0x00, 0x91, 0x0f, 0x00, 0x00, 0x8d, 0x00,
+			0x8b, 0x30, 0x81, 0x88, 0x02, 0x42, 0x00, 0x8a,
+			0xd6, 0x72, 0x06, 0x33, 0xb7, 0x46, 0x02, 0x3d,
+			0x5b, 0x2a, 0x70, 0x02, 0x95, 0xd9, 0xc8, 0x13,
+			0x34, 0xee, 0xf5, 0x6b, 0x31, 0x6a, 0x41, 0x53,
+			0x3f, 0xea, 0x79, 0x46, 0x6a, 0x4d, 0xf5, 0x06,
+			0xaf, 0x0c, 0xcf, 0xb6, 0x87, 0x0f, 0x5b, 0x39,
+			0x90, 0xac, 0x24, 0xef, 0xdf, 0x8b, 0x68, 0x2b,
+			0xb5, 0x20, 0xbc, 0x05, 0xdd, 0x89, 0xbf, 0x52,
+			0x1f, 0xbf, 0x57, 0x3a, 0xf9, 0x62, 0x6d, 0x73,
+			0x02, 0x42, 0x00, 0xc7, 0x22, 0x97, 0x90, 0xb1,
+			0x9b, 0xc3, 0x2c, 0x71, 0xe2, 0xe2, 0x58, 0xf8,
+			0x0d, 0xcc, 0x8b, 0x82, 0x19, 0xad, 0x33, 0xec,
+			0x99, 0xc2, 0xb7, 0x17, 0x78, 0x13, 0x03, 0x89,
+			0xba, 0xd0, 0x02, 0x44, 0xf7, 0x1a, 0xbd, 0xf5,
+			0x68, 0xeb, 0x57, 0xa4, 0xca, 0x32, 0xdf, 0xe1,
+			0xd0, 0xfd, 0x49, 0xb4, 0x36, 0x9a, 0x76, 0x1a,
+			0xcb, 0xd6, 0x8b, 0xb2, 0x96, 0x11, 0xce, 0xc7,
+			0x18, 0x8a, 0x9f, 0xe1, 0x14, 0x03, 0x01, 0x00,
+			0x01, 0x01, 0x16, 0x03, 0x01, 0x00, 0x30, 0xaf,
+			0xb6, 0x62, 0x0f, 0x46, 0x7a, 0x55, 0x22, 0x90,
+			0xde, 0x94, 0xbf, 0x49, 0x4e, 0xf2, 0xc5, 0xbd,
+			0x71, 0xdf, 0xfc, 0x2d, 0x4a, 0x46, 0x0d, 0xde,
+			0x98, 0x4f, 0xba, 0xbf, 0x8e, 0xcc, 0x8c, 0xe0,
+			0x04, 0x1d, 0x67, 0x4f, 0xf7, 0xcf, 0xb1, 0xb4,
+			0xfb, 0x71, 0x15, 0xde, 0x01, 0xd8, 0x69,
+		},
+		{
+			0x16, 0x03, 0x01, 0x02, 0x76, 0x04, 0x00, 0x02,
+			0x72, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6c, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
+			0xe8, 0x8b, 0xde, 0xef, 0xba, 0xb5, 0x1f, 0x08,
+			0x0e, 0xaf, 0x24, 0xc2, 0x0e, 0xed, 0xd0, 0xc5,
+			0x86, 0xdd, 0x09, 0x76, 0xe3, 0xc3, 0x69, 0x7c,
+			0x88, 0x2f, 0x4d, 0x86, 0x87, 0x32, 0x82, 0x1e,
+			0x63, 0xa1, 0x92, 0x4b, 0xfc, 0xde, 0xde, 0xad,
+			0x16, 0x2c, 0xb5, 0xf8, 0xc7, 0x57, 0x68, 0xa8,
+			0x27, 0x35, 0xc3, 0x47, 0x1d, 0x59, 0x22, 0xf7,
+			0xfd, 0x8b, 0xff, 0xa4, 0x09, 0xc0, 0x1c, 0x10,
+			0x80, 0x10, 0x7f, 0x4c, 0x7a, 0x94, 0x40, 0x10,
+			0x0d, 0xda, 0x8a, 0xe5, 0x4a, 0xbc, 0xd0, 0xc0,
+			0x4b, 0xa5, 0x33, 0x97, 0xc6, 0xe7, 0x40, 0x7f,
+			0x7f, 0x8c, 0xf9, 0xf8, 0xc8, 0xb8, 0xfb, 0x8c,
+			0xdd, 0x28, 0x81, 0xae, 0xfd, 0x37, 0x20, 0x3a,
+			0x40, 0x37, 0x99, 0xc4, 0x21, 0x01, 0xc4, 0x91,
+			0xb0, 0x5e, 0x11, 0xc5, 0xa9, 0xfd, 0x9a, 0x02,
+			0x7e, 0x97, 0x6a, 0x86, 0x89, 0xb8, 0xc1, 0x32,
+			0x4c, 0x7e, 0x6d, 0x47, 0x61, 0x0e, 0xe3, 0xc2,
+			0xf0, 0x62, 0x3c, 0xc6, 0x71, 0x4f, 0xbb, 0x47,
+			0x65, 0xb1, 0xd9, 0x22, 0x79, 0x15, 0xea, 0x1f,
+			0x4b, 0x2a, 0x8a, 0xa4, 0xc8, 0x73, 0x34, 0xba,
+			0x83, 0xe4, 0x70, 0x99, 0xc9, 0xcf, 0xbe, 0x64,
+			0x99, 0xb9, 0xfa, 0xe9, 0xaf, 0x5d, 0xc7, 0x20,
+			0x26, 0xde, 0xc5, 0x06, 0x12, 0x36, 0x4f, 0x4d,
+			0xc0, 0xbb, 0x81, 0x5b, 0x5e, 0x38, 0xc3, 0x07,
+			0x21, 0x04, 0x1a, 0x53, 0x9c, 0x59, 0xac, 0x2d,
+			0xe6, 0xa5, 0x93, 0xa5, 0x19, 0xc6, 0xb0, 0xf7,
+			0x56, 0x5d, 0xdf, 0xd1, 0xf4, 0xfd, 0x44, 0x6d,
+			0xc6, 0xa2, 0x31, 0xa7, 0x35, 0x42, 0x18, 0x50,
+			0x0c, 0x4f, 0x6e, 0xe3, 0x3b, 0xa3, 0xaa, 0x1c,
+			0xbe, 0x41, 0x0d, 0xce, 0x6c, 0x62, 0xe1, 0x96,
+			0x2d, 0xbd, 0x14, 0x31, 0xe3, 0xc4, 0x5b, 0xbf,
+			0xf6, 0xde, 0xec, 0x42, 0xe8, 0xc7, 0x2a, 0x0b,
+			0xdb, 0x2d, 0x7c, 0xf0, 0x3f, 0x45, 0x32, 0x45,
+			0x09, 0x47, 0x09, 0x0f, 0x21, 0x22, 0x45, 0x06,
+			0x11, 0xb8, 0xf9, 0xe6, 0x67, 0x90, 0x4b, 0x4a,
+			0xde, 0x81, 0xfb, 0xeb, 0xe7, 0x9a, 0x08, 0x30,
+			0xcf, 0x51, 0xe1, 0xd9, 0xfa, 0x79, 0xa3, 0xcc,
+			0x65, 0x1a, 0x83, 0x86, 0xc9, 0x7a, 0x41, 0xf5,
+			0xdf, 0xa0, 0x7c, 0x44, 0x23, 0x17, 0xf3, 0x62,
+			0xe8, 0xa9, 0x31, 0x1e, 0x6b, 0x05, 0x4b, 0x4f,
+			0x9d, 0x91, 0x46, 0x92, 0xa6, 0x25, 0x32, 0xca,
+			0xa1, 0x75, 0xda, 0xe6, 0x80, 0x3e, 0x7f, 0xd1,
+			0x26, 0x57, 0x07, 0x42, 0xe4, 0x91, 0xff, 0xbd,
+			0x44, 0xae, 0x98, 0x5c, 0x1d, 0xdf, 0x11, 0xe3,
+			0xae, 0x87, 0x5e, 0xb7, 0x69, 0xad, 0x34, 0x7f,
+			0x3a, 0x07, 0x7c, 0xdf, 0xfc, 0x76, 0x17, 0x8b,
+			0x62, 0xc8, 0xe1, 0x78, 0x2a, 0xc8, 0xb9, 0x8a,
+			0xbb, 0x5c, 0xfb, 0x38, 0x74, 0x91, 0x6e, 0x12,
+			0x0c, 0x1f, 0x8e, 0xe1, 0xc2, 0x01, 0xd8, 0x9d,
+			0x23, 0x0f, 0xc4, 0x67, 0x5d, 0xe5, 0x67, 0x4b,
+			0x94, 0x6e, 0x69, 0x72, 0x90, 0x2d, 0x52, 0x78,
+			0x8e, 0x61, 0xba, 0xdf, 0x4e, 0xf5, 0xdc, 0xfb,
+			0x73, 0xbe, 0x03, 0x70, 0xd9, 0x01, 0x30, 0xf3,
+			0xa1, 0xbb, 0x9a, 0x5f, 0xec, 0x9e, 0xed, 0x8d,
+			0xdd, 0x53, 0xfd, 0x60, 0xc3, 0x2b, 0x7a, 0x00,
+			0x2c, 0xf9, 0x0a, 0x57, 0x47, 0x45, 0x43, 0xb3,
+			0x23, 0x01, 0x9c, 0xee, 0x54, 0x4d, 0x58, 0xd3,
+			0x71, 0x1c, 0xc9, 0xd3, 0x30, 0x9e, 0x14, 0xa5,
+			0xf3, 0xbf, 0x4d, 0x9b, 0xb7, 0x13, 0x21, 0xae,
+			0xd2, 0x8d, 0x6e, 0x6f, 0x1c, 0xcc, 0xb2, 0x41,
+			0xb2, 0x64, 0x56, 0x83, 0xce, 0xd1, 0x0c, 0x79,
+			0x32, 0x78, 0xef, 0xc5, 0x21, 0xb1, 0xe8, 0xc4,
+			0x42, 0xa7, 0x8d, 0xc1, 0xfa, 0xa1, 0x9c, 0x3c,
+			0x21, 0xd8, 0xe9, 0x90, 0xe2, 0x7c, 0x14, 0x26,
+			0xfe, 0x61, 0x3e, 0xf9, 0x71, 0x1d, 0x5d, 0x49,
+			0x3b, 0xb1, 0xb8, 0x42, 0xa1, 0xb8, 0x1c, 0x75,
+			0x7d, 0xee, 0xed, 0xfc, 0xe6, 0x20, 0x2b, 0x9e,
+			0x10, 0x52, 0xda, 0x56, 0x4d, 0x64, 0x6c, 0x41,
+			0xc1, 0xf7, 0x60, 0x0c, 0x10, 0x65, 0x6f, 0xd4,
+			0xe9, 0x9b, 0x0d, 0x83, 0x13, 0xc8, 0x5a, 0xa3,
+			0x56, 0x2a, 0x42, 0xc6, 0x1c, 0xfe, 0xdb, 0xba,
+			0x3d, 0x04, 0x12, 0x4c, 0xb9, 0x5d, 0x4b, 0x7c,
+			0xe1, 0x93, 0xa5, 0x41, 0xb8, 0x95, 0x45, 0x34,
+			0x76, 0x5b, 0x72, 0x7b, 0x3f, 0x1a, 0x6b, 0xc5,
+			0x11, 0x1c, 0x11, 0xa0, 0x77, 0xba, 0x91, 0xcf,
+			0xe1, 0xa2, 0x0d, 0x14, 0x03, 0x01, 0x00, 0x01,
+			0x01, 0x16, 0x03, 0x01, 0x00, 0x30, 0x11, 0x27,
+			0x85, 0x39, 0xb8, 0x7e, 0xa9, 0x14, 0x19, 0x1f,
+			0xd4, 0x0f, 0x24, 0xea, 0xf9, 0xe6, 0x94, 0x2f,
+			0x1b, 0x09, 0x6e, 0xe8, 0xdc, 0x92, 0x9d, 0x86,
+			0x64, 0x9e, 0x49, 0x39, 0x62, 0x1f, 0xf8, 0x06,
+			0x1c, 0xa1, 0x9c, 0x52, 0x24, 0xcb, 0x30, 0xae,
+			0x9c, 0xe9, 0xf0, 0xae, 0x4e, 0xd3, 0x17, 0x03,
+			0x01, 0x00, 0x20, 0x0c, 0x89, 0xb1, 0x01, 0xba,
+			0x3b, 0x02, 0xed, 0xcf, 0x2c, 0x89, 0x55, 0x25,
+			0x5f, 0x40, 0xfe, 0x0b, 0xde, 0x95, 0xe4, 0x91,
+			0x5e, 0x56, 0x20, 0xf7, 0x5e, 0xbd, 0x54, 0x53,
+			0x9f, 0x08, 0x46, 0x17, 0x03, 0x01, 0x00, 0x30,
+			0x5e, 0xaa, 0x4d, 0xea, 0x0f, 0xe0, 0x9b, 0x0e,
+			0x25, 0xde, 0x0d, 0x02, 0x52, 0xf5, 0xb2, 0x2a,
+			0xeb, 0x62, 0xb6, 0x93, 0x31, 0xa4, 0xc3, 0xb2,
+			0x0c, 0x34, 0x69, 0x74, 0x47, 0x01, 0xa0, 0xa7,
+			0x83, 0x9c, 0x8f, 0x3a, 0xe0, 0xb4, 0xc5, 0x6d,
+			0x15, 0x39, 0x26, 0x3c, 0x59, 0xbd, 0x93, 0x64,
+			0x15, 0x03, 0x01, 0x00, 0x20, 0x33, 0x2f, 0xac,
+			0xe0, 0x6c, 0x97, 0x1c, 0xaa, 0x71, 0x0c, 0xc3,
+			0x18, 0x27, 0x3a, 0x0b, 0x9c, 0x17, 0xd4, 0xa4,
+			0xea, 0xf2, 0x8f, 0x4e, 0x7b, 0xed, 0x7c, 0x8a,
+			0x39, 0x7a, 0xf3, 0x74, 0x74,
+		},
+	}},
+}
+
 // cert.pem and key.pem were generated with generate_cert.go
 // Thus, they have no ExtKeyUsage fields and trigger an error
 // when verification is turned on.
@@ -1954,4 +2596,33 @@ Rybatlvg/fzBEaJFyq09zhngkxlZOUtBVTqzl17RVvY2orgH02U4Hb
 qTdQRYlHRftgnWK1AkANibn9PRYJ7mJyJ9Dyj2QeNcSkSTzrt0tPvUMf4+meJymN
 1Ntu5+S1DLLzfxlaljWG6ylW6DNxujCyuXIV2rvA
 -----END RSA PRIVATE KEY-----
+*/
+
+var clientECDSACertificate = loadPEMCert(`
+-----BEGIN CERTIFICATE-----
+MIIB/DCCAV4CCQCaMIRsJjXZFzAJBgcqhkjOPQQBMEUxCzAJBgNVBAYTAkFVMRMw
+EQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBXaWRnaXRzIFB0
+eSBMdGQwHhcNMTIxMTE0MTMyNTUzWhcNMjIxMTEyMTMyNTUzWjBBMQswCQYDVQQG
+EwJBVTEMMAoGA1UECBMDTlNXMRAwDgYDVQQHEwdQeXJtb250MRIwEAYDVQQDEwlK
+b2VsIFNpbmcwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABACVjJF1FMBexFe01MNv
+ja5oHt1vzobhfm6ySD6B5U7ixohLZNz1MLvT/2XMW/TdtWo+PtAd3kfDdq0Z9kUs
+jLzYHQFMH3CQRnZIi4+DzEpcj0B22uCJ7B0rxE4wdihBsmKo+1vx+U56jb0JuK7q
+ixgnTy5w/hOWusPTQBbNZU6sER7m8TAJBgcqhkjOPQQBA4GMADCBiAJCAOAUxGBg
+C3JosDJdYUoCdFzCgbkWqD8pyDbHgf9stlvZcPE4O1BIKJTLCRpS8V3ujfK58PDa
+2RU6+b0DeoeiIzXsAkIBo9SKeDUcSpoj0gq+KxAxnZxfvuiRs9oa9V2jI/Umi0Vw
+jWVim34BmT0Y9hCaOGGbLlfk+syxis7iI6CH8OFnUes=
+-----END CERTIFICATE-----
+`)
+
+/* corresponding key for cert is:
+-----BEGIN EC PARAMETERS-----
+BgUrgQQAIw==
+-----END EC PARAMETERS-----
+-----BEGIN EC PRIVATE KEY-----
+MIHcAgEBBEIBkJN9X4IqZIguiEVKMqeBUP5xtRsEv4HJEtOpOGLELwO53SD78Ew8
+k+wLWoqizS3NpQyMtrU8JFdWfj+C57UNkOugBwYFK4EEACOhgYkDgYYABACVjJF1
+FMBexFe01MNvja5oHt1vzobhfm6ySD6B5U7ixohLZNz1MLvT/2XMW/TdtWo+PtAd
+3kfDdq0Z9kUsjLzYHQFMH3CQRnZIi4+DzEpcj0B22uCJ7B0rxE4wdihBsmKo+1vx
++U56jb0JuK7qixgnTy5w/hOWusPTQBbNZU6sER7m8Q==
+-----END EC PRIVATE KEY-----
 */
