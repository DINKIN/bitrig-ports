$OpenBSD$
--- src/pkg/crypto/tls/handshake_client.go.orig	Mon Jan 21 19:30:18 2013
+++ src/pkg/crypto/tls/handshake_client.go	Mon Jan 21 19:35:13 2013
@@ -7,9 +7,11 @@ package tls
 import (
 	"bytes"
 	"crypto"
+	"crypto/ecdsa"
 	"crypto/rsa"
 	"crypto/subtle"
 	"crypto/x509"
+	"encoding/asn1"
 	"errors"
 	"io"
 	"strconv"
@@ -121,7 +123,10 @@ func (c *Conn) clientHandshake() error {
 		}
 	}
 
-	if _, ok := certs[0].PublicKey.(*rsa.PublicKey); !ok {
+	switch certs[0].PublicKey.(type) {
+	case *rsa.PublicKey, *ecdsa.PublicKey:
+		break
+	default:
 		return c.sendAlert(alertUnsupportedCertificate)
 	}
 
@@ -184,12 +189,13 @@ func (c *Conn) clientHandshake() error {
 
 		finishedHash.Write(certReq.marshal())
 
-		// For now, we only know how to sign challenges with RSA
-		rsaAvail := false
+		rsaAvail, ecdsaAvail := false, false
 		for _, certType := range certReq.certificateTypes {
-			if certType == certTypeRSASign {
+			switch certType {
+			case certTypeRSASign:
 				rsaAvail = true
-				break
+			case certTypeECDSASign:
+				ecdsaAvail = true
 			}
 		}
 
@@ -198,7 +204,7 @@ func (c *Conn) clientHandshake() error {
 		// certReq.certificateAuthorities
 	findCert:
 		for i, cert := range c.config.Certificates {
-			if !rsaAvail {
+			if !rsaAvail && !ecdsaAvail {
 				continue
 			}
 
@@ -210,13 +216,16 @@ func (c *Conn) clientHandshake() error {
 				}
 			}
 
-			if leaf.PublicKeyAlgorithm != x509.RSA {
+			switch {
+			case rsaAvail && leaf.PublicKeyAlgorithm == x509.RSA:
+			case ecdsaAvail && leaf.PublicKeyAlgorithm == x509.ECDSA:
+			default:
 				continue
 			}
 
 			if len(certReq.certificateAuthorities) == 0 {
 				// they gave us an empty list, so just take the
-				// first RSA cert from c.config.Certificates
+				// first cert from c.config.Certificates
 				certToSend = &cert
 				break
 			}
@@ -264,11 +273,23 @@ func (c *Conn) clientHandshake() error {
 	}
 
 	if certToSend != nil {
+		var signed []byte
 		certVerify := new(certificateVerifyMsg)
-		digest := make([]byte, 0, 36)
-		digest = finishedHash.serverMD5.Sum(digest)
-		digest = finishedHash.serverSHA1.Sum(digest)
-		signed, err := rsa.SignPKCS1v15(c.config.rand(), c.config.Certificates[0].PrivateKey.(*rsa.PrivateKey), crypto.MD5SHA1, digest)
+		switch key := c.config.Certificates[0].PrivateKey.(type) {
+		case *ecdsa.PrivateKey:
+			digest := finishedHash.serverSHA1.Sum(nil)
+			r, s, err := ecdsa.Sign(c.config.rand(), key, digest)
+			if err == nil {
+				signed, err = asn1.Marshal(ecdsaSignature{r, s})
+			}
+		case *rsa.PrivateKey:
+			digest := make([]byte, 0, 36)
+			digest = finishedHash.serverMD5.Sum(digest)
+			digest = finishedHash.serverSHA1.Sum(digest)
+			signed, err = rsa.SignPKCS1v15(c.config.rand(), key, crypto.MD5SHA1, digest)
+		default:
+			err = errors.New("unknown private key type")
+		}
 		if err != nil {
 			return c.sendAlert(alertInternalError)
 		}
