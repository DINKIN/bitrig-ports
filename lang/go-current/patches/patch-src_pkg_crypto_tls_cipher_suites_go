$OpenBSD$
--- src/pkg/crypto/tls/cipher_suites.go.orig	Mon Jan 21 19:30:18 2013
+++ src/pkg/crypto/tls/cipher_suites.go	Mon Jan 21 19:35:13 2013
@@ -56,6 +56,10 @@ var cipherSuites = []*cipherSuite{
 	{TLS_RSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, rsaKA, false, cipher3DES, macSHA1},
 	{TLS_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, rsaKA, false, cipherAES, macSHA1},
 	{TLS_RSA_WITH_AES_256_CBC_SHA, 32, 20, 16, rsaKA, false, cipherAES, macSHA1},
+	{TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, 16, 20, 0, ecdheECDSAKA, true, cipherRC4, macSHA1},
+	{TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheECDSAKA, true, cipher3DES, macSHA1},
+	{TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, 16, 20, 16, ecdheECDSAKA, true, cipherAES, macSHA1},
+	{TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, 32, 20, 16, ecdheECDSAKA, true, cipherAES, macSHA1},
 	{TLS_ECDHE_RSA_WITH_RC4_128_SHA, 16, 20, 0, ecdheRSAKA, true, cipherRC4, macSHA1},
 	{TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheRSAKA, true, cipher3DES, macSHA1},
 	{TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, ecdheRSAKA, true, cipherAES, macSHA1},
@@ -158,8 +162,12 @@ func rsaKA() keyAgreement {
 	return rsaKeyAgreement{}
 }
 
+func ecdheECDSAKA() keyAgreement {
+	return &ecdheKeyAgreement{sigType: ecdheSigECDSA}
+}
+
 func ecdheRSAKA() keyAgreement {
-	return new(ecdheRSAKeyAgreement)
+	return &ecdheKeyAgreement{sigType: ecdheSigRSA}
 }
 
 // mutualCipherSuite returns a cipherSuite given a list of supported
@@ -181,12 +189,16 @@ func mutualCipherSuite(have []uint16, want uint16) *ci
 // A list of the possible cipher suite ids. Taken from
 // http://www.iana.org/assignments/tls-parameters/tls-parameters.xml
 const (
-	TLS_RSA_WITH_RC4_128_SHA            uint16 = 0x0005
-	TLS_RSA_WITH_3DES_EDE_CBC_SHA       uint16 = 0x000a
-	TLS_RSA_WITH_AES_128_CBC_SHA        uint16 = 0x002f
-	TLS_RSA_WITH_AES_256_CBC_SHA        uint16 = 0x0035
-	TLS_ECDHE_RSA_WITH_RC4_128_SHA      uint16 = 0xc011
-	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xc012
-	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA  uint16 = 0xc013
-	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA  uint16 = 0xc014
+	TLS_RSA_WITH_RC4_128_SHA              uint16 = 0x0005
+	TLS_RSA_WITH_3DES_EDE_CBC_SHA         uint16 = 0x000a
+	TLS_RSA_WITH_AES_128_CBC_SHA          uint16 = 0x002f
+	TLS_RSA_WITH_AES_256_CBC_SHA          uint16 = 0x0035
+	TLS_ECDHE_ECDSA_WITH_RC4_128_SHA      uint16 = 0xc007
+	TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xc008
+	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA  uint16 = 0xc009
+	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA  uint16 = 0xc00a
+	TLS_ECDHE_RSA_WITH_RC4_128_SHA        uint16 = 0xc011
+	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA   uint16 = 0xc012
+	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA    uint16 = 0xc013
+	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA    uint16 = 0xc014
 )
