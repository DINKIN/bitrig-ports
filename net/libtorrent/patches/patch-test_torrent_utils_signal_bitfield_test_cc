--- test/torrent/utils/signal_bitfield_test.cc.orig	Wed May 14 16:18:48 2014
+++ test/torrent/utils/signal_bitfield_test.cc	Sun Nov  2 01:45:17 2014
@@ -9,8 +9,6 @@
 
 CPPUNIT_TEST_SUITE_REGISTRATION(utils_signal_bitfield_test);
 
-namespace tr1 { using namespace std::tr1; }
-
 static void
 mark_index(uint32_t* bitfield, unsigned int index) {
   __sync_fetch_and_or(bitfield, 1 << index);
@@ -32,7 +30,7 @@ utils_signal_bitfield_test::tearDown() {
 }
 
 static bool
-verify_did_internal_error(tr1::function<void ()> func, bool should_throw) {
+verify_did_internal_error(std::function<unsigned int ()> func, bool should_throw) {
   bool did_throw = false;
 
   try {
@@ -50,7 +48,7 @@ verify_did_internal_error(tr1::function<void ()> func,
 
 
 #define SIGNAL_BITFIELD_DID_INTERNAL_ERROR(verify_slot, did_throw)      \
-  CPPUNIT_ASSERT(verify_did_internal_error(tr1::bind(&torrent::signal_bitfield::add_signal, \
+  CPPUNIT_ASSERT(verify_did_internal_error(std::bind(&torrent::signal_bitfield::add_signal, \
                                                      &signal_bitfield,  \
                                                      torrent::signal_bitfield::slot_type(verify_slot)), \
                                            did_throw));
@@ -64,16 +62,16 @@ utils_signal_bitfield_test::test_basic() {
   SIGNAL_BITFIELD_DID_INTERNAL_ERROR(torrent::signal_bitfield::slot_type(), true);
 
   for (unsigned int i = 0; i < torrent::signal_bitfield::max_size; i++)
-    CPPUNIT_ASSERT(signal_bitfield.add_signal(tr1::bind(&mark_index, &marked_bitfield, i)) == i);
+    CPPUNIT_ASSERT(signal_bitfield.add_signal(std::bind(&mark_index, &marked_bitfield, i)) == i);
 
-  SIGNAL_BITFIELD_DID_INTERNAL_ERROR(tr1::bind(&mark_index, &marked_bitfield, torrent::signal_bitfield::max_size), true);
+  SIGNAL_BITFIELD_DID_INTERNAL_ERROR(std::bind(&mark_index, &marked_bitfield, torrent::signal_bitfield::max_size), true);
 }
 
 void
 utils_signal_bitfield_test::test_single() {
   SETUP_SIGNAL_BITFIELD();
 
-  CPPUNIT_ASSERT(signal_bitfield.add_signal(tr1::bind(&mark_index, &marked_bitfield, 0)) == 0);
+  CPPUNIT_ASSERT(signal_bitfield.add_signal(std::bind(&mark_index, &marked_bitfield, 0)) == 0);
 
   signal_bitfield.signal(0);
   CPPUNIT_ASSERT(marked_bitfield == 0x0);
@@ -92,7 +90,7 @@ utils_signal_bitfield_test::test_multiple() {
   SETUP_SIGNAL_BITFIELD();
 
   for (unsigned int i = 0; i < torrent::signal_bitfield::max_size; i++)
-    CPPUNIT_ASSERT(signal_bitfield.add_signal(tr1::bind(&mark_index, &marked_bitfield, i)) == i);
+    CPPUNIT_ASSERT(signal_bitfield.add_signal(std::bind(&mark_index, &marked_bitfield, i)) == i);
 
   signal_bitfield.signal(2);
   signal_bitfield.signal(31);
@@ -114,7 +112,7 @@ utils_signal_bitfield_test::test_thread() {
   // thread->set_test_flag(thread_test::test_flag_long_timeout);
 
   for (unsigned int i = 0; i < torrent::signal_bitfield::max_size; i++)
-    CPPUNIT_ASSERT(thread->signal_bitfield()->add_signal(tr1::bind(&mark_index, &marked_bitfield, i)) == i);
+    CPPUNIT_ASSERT(thread->signal_bitfield()->add_signal(std::bind(&mark_index, &marked_bitfield, i)) == i);
 
   thread->init_thread();
   thread->start_thread();
@@ -128,12 +126,12 @@ utils_signal_bitfield_test::test_thread() {
     thread->signal_bitfield()->signal(i % 20);
     // thread->interrupt();
 
-    CPPUNIT_ASSERT(wait_for_true(tr1::bind(&check_index, &marked_bitfield, i % 20)));
+    CPPUNIT_ASSERT(wait_for_true(std::bind(&check_index, &marked_bitfield, i % 20)));
     __sync_fetch_and_and(&marked_bitfield, ~uint32_t());
   }
 
   thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
 
   delete thread;
 }
