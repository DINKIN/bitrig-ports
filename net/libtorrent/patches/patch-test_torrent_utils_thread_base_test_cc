--- test/torrent/utils/thread_base_test.cc.orig	Wed May 14 16:18:48 2014
+++ test/torrent/utils/thread_base_test.cc	Sun Nov  2 01:45:17 2014
@@ -1,7 +1,7 @@
 #include "config.h"
 
 #include <unistd.h>
-#include <tr1/functional>
+#include lt_tr1_functional
 #include <torrent/exceptions.h>
 #include <torrent/poll_select.h>
 #include <torrent/utils/thread_base.h>
@@ -10,8 +10,16 @@
 
 CPPUNIT_TEST_SUITE_REGISTRATION(utils_thread_base_test);
 
-namespace tr1 { using namespace std::tr1; }
+const int thread_test::test_flag_pre_stop;
+const int thread_test::test_flag_long_timeout;
 
+const int thread_test::test_flag_acquire_global;
+const int thread_test::test_flag_has_global;
+
+const int thread_test::test_flag_do_work;
+const int thread_test::test_flag_pre_poke;
+const int thread_test::test_flag_post_poke;
+
 void throw_shutdown_exception() { throw torrent::shutdown_exception(); }
 
 thread_test::thread_test() :
@@ -58,7 +66,7 @@ thread_test::call_events() {
 }
 
 bool
-wait_for_true(std::tr1::function<bool ()> test_function) {
+wait_for_true(std::function<bool ()> test_function) {
   int i = 100;
 
   do {
@@ -108,15 +116,15 @@ utils_thread_base_test::test_lifecycle() {
   CPPUNIT_ASSERT(thread->test_state() == thread_test::TEST_PRE_START);
 
   thread->set_pre_stop();
-  CPPUNIT_ASSERT(!wait_for_true(tr1::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
+  CPPUNIT_ASSERT(!wait_for_true(std::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
 
   thread->start_thread();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_state, thread, thread_test::STATE_ACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_ACTIVE)));
   CPPUNIT_ASSERT(thread->is_active());
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
 
   thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
   CPPUNIT_ASSERT(thread->is_inactive());
 
   delete thread;
@@ -144,10 +152,10 @@ utils_thread_base_test::test_global_lock_basic() {
   CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
 
   thread->set_acquire_global();
-  CPPUNIT_ASSERT(!wait_for_true(tr1::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
+  CPPUNIT_ASSERT(!wait_for_true(std::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
   
   torrent::thread_base::release_global_lock();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
 
   CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
   torrent::thread_base::release_global_lock();
@@ -159,7 +167,7 @@ utils_thread_base_test::test_global_lock_basic() {
 
   torrent::thread_base::release_global_lock();
   thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
 
   delete thread;
 }
@@ -182,11 +190,11 @@ utils_thread_base_test::test_interrupt() {
     thread->interrupt();
 
     // Wait for flag to clear.
-    CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_not_test_flags, thread, thread_test::test_flag_do_work)));
+    CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_not_test_flags, thread, thread_test::test_flag_do_work)));
   }
 
   thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(tr1::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
 
   delete thread;
 }
