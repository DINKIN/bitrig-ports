--- src/torrent/utils/resume.cc.orig	Tue Feb 14 04:15:27 2012
+++ src/torrent/utils/resume.cc	Sun Nov  2 01:45:17 2014
@@ -34,6 +34,8 @@
 //           Skomakerveien 33
 //           3185 Skoppum, NORWAY
 
+#define __STDC_FORMAT_MACROS
+
 #include "config.h"
 
 #include <rak/file_stat.h>
@@ -41,6 +43,7 @@
 
 #include "peer/peer_info.h"
 #include "peer/peer_list.h"
+#include "torrent/utils/log.h"
 
 #include "data/file.h"
 #include "data/file_list.h"
@@ -59,47 +62,51 @@
 
 #include "resume.h"
 
+#define LT_LOG_LOAD(log_fmt, ...)                                       \
+  lt_log_print_info(LOG_RESUME_DATA, download.info(), "resume_load", log_fmt, __VA_ARGS__);
+#define LT_LOG_LOAD_INVALID(log_fmt, ...)                               \
+  lt_log_print_info(LOG_RESUME_DATA, download.info(), "resume_load", "invalid resume data: " log_fmt, __VA_ARGS__);
+#define LT_LOG_LOAD_FILE(log_fmt, ...)                                  \
+  lt_log_print_info(LOG_RESUME_DATA, download.info(), "resume_load", "file[%u]: " log_fmt, \
+                    file_index, __VA_ARGS__);
+#define LT_LOG_SAVE(log_fmt, ...)                                       \
+  lt_log_print_info(LOG_RESUME_DATA, download.info(), "resume_save", log_fmt, __VA_ARGS__);
+#define LT_LOG_SAVE_FILE(log_fmt, ...)                                  \
+  lt_log_print_info(LOG_RESUME_DATA, download.info(), "resume_save", "file[%u]: " log_fmt, \
+                    file_index, __VA_ARGS__);
+
 namespace torrent {
 
 void
 resume_load_progress(Download download, const Object& object) {
-  if (!object.has_key_list("files"))
+  if (!object.has_key_list("files")) {
+    LT_LOG_LOAD("could not find 'files' key", 0);
     return;
+  }
 
   const Object::list_type& files = object.get_key_list("files");
 
-  if (files.size() != download.file_list()->size_files())
+  if (files.size() != download.file_list()->size_files()) {
+    LT_LOG_LOAD_INVALID("number of resumable files does not match files in torrent", 0);
     return;
+  }
 
-  if (object.has_key_string("bitfield")) {
-    const Object::string_type& bitfield = object.get_key_string("bitfield");
-
-    if (bitfield.size() != download.file_list()->bitfield()->size_bytes())
-      return;
-
-    download.set_bitfield((uint8_t*)bitfield.c_str(), (uint8_t*)(bitfield.c_str() + bitfield.size()));
-
-  } else if (object.has_key_value("bitfield")) {
-    Object::value_type chunksDone = object.get_key_value("bitfield");
-
-    if (chunksDone == download.file_list()->bitfield()->size_bits())
-      download.set_bitfield(true);
-    else if (chunksDone == 0)
-      download.set_bitfield(false);
-    else
-      return;
-
-  } else {
+  if (!resume_load_bitfield(download, object))
     return;
-  }
 
   Object::list_const_iterator filesItr  = files.begin();
+
   FileList* fileList = download.file_list();
 
   for (FileList::iterator listItr = fileList->begin(), listLast = fileList->end(); listItr != listLast; ++listItr, ++filesItr) {
+    std::string file_path = (*listItr)->path()->as_string();
+    unsigned int file_index = std::distance(fileList->begin(), listItr);
+
     rak::file_stat fs;
 
     if (!filesItr->has_key_value("mtime")) {
+      LT_LOG_LOAD_FILE("no mtime found, file:create|resize range:clear|recheck", 0);
+
       // If 'mtime' is erased, it means we should start hashing and
       // downloading the file as if it was a new torrent.
       (*listItr)->set_flags(File::flag_create_queued | File::flag_resize_queued);
@@ -127,8 +134,12 @@ resume_load_progress(Download download, const Object& 
       // creating the file. It will just fail on the mtime check
       // later, so we don't need to handle it explicitly.
 
-      if (mtimeValue == ~int64_t(0))
+      if (mtimeValue == ~int64_t(0)) {
+        LT_LOG_LOAD_FILE("file not created by client, file:create|resize range:clear|(recheck)", 0);
         (*listItr)->set_flags(File::flag_create_queued | File::flag_resize_queued);
+      } else {
+        LT_LOG_LOAD_FILE("do not create file, file:- range:clear|(recheck)", 0);
+      }
 
       // Ensure the bitfield range is cleared so that stray resume
       // data doesn't get counted.
@@ -140,6 +151,12 @@ resume_load_progress(Download download, const Object& 
     // If the file is the wrong size, queue resize and clear resume
     // data for that file.
     if ((uint64_t)fs.size() != (*listItr)->size_bytes()) {
+      if (fs.size() == 0) {
+        LT_LOG_LOAD_FILE("zero-length file found, file:resize range:clear|recheck", 0);
+      } else {
+        LT_LOG_LOAD_FILE("file has the wrong size, file:resize range:clear|recheck", 0);
+      }
+
       (*listItr)->set_flags(File::flag_resize_queued);
       download.update_range(Download::update_range_clear | Download::update_range_recheck,
                             (*listItr)->range().first, (*listItr)->range().second);
@@ -151,8 +168,10 @@ resume_load_progress(Download download, const Object& 
     // chunks that might not have been completely written to disk.
     //
     // This gets handled below, so just skip to the next file.
-    if (mtimeValue == ~int64_t(3))
+    if (mtimeValue == ~int64_t(3)) {
+      LT_LOG_LOAD_FILE("file was downloading", 0);
       continue;
+    }
 
     // An 'mtime' of ~2 indicates that the resume data was made by an
     // old rtorrent version which does not include 'uncertain_pieces'
@@ -163,10 +182,13 @@ resume_load_progress(Download download, const Object& 
     // files that have completed and got no indices in
     // TransferList::completed_list().
     if (mtimeValue == ~int64_t(2) || mtimeValue != fs.modified_time()) {
+      LT_LOG_LOAD_FILE("resume data doesn't include uncertain pieces, range:clear|recheck", 0);
       download.update_range(Download::update_range_clear | Download::update_range_recheck,
                             (*listItr)->range().first, (*listItr)->range().second);
       continue;
     }
+
+    LT_LOG_LOAD_FILE("no recheck needed", 0);
   }
 
   resume_load_uncertain_pieces(download, object);
@@ -176,13 +198,17 @@ void
 resume_save_progress(Download download, Object& object) {
   // We don't remove the old hash data since it might still be valid,
   // just that the client didn't finish the check this time.
-  if (!download.is_hash_checked())
+  if (!download.is_hash_checked()) {
+    LT_LOG_SAVE("hash not checked, no progress saved", 0);
     return;
+  }
 
   download.sync_chunks();
 
   // If syncing failed, invalidate all resume data and return.
   if (!download.is_hash_checked()) {
+    LT_LOG_SAVE("sync failed, invalidating resume data", 0);
+
     if (!object.has_key_list("files"))
       return;
 
@@ -194,12 +220,7 @@ resume_save_progress(Download download, Object& object
     return;
   }
 
-  const Bitfield* bitfield = download.file_list()->bitfield();
-
-  if (bitfield->is_all_set() || bitfield->is_all_unset())
-    object.insert_key("bitfield", bitfield->size_set());
-  else
-    object.insert_key("bitfield", std::string((char*)bitfield->begin(), bitfield->size_bytes()));
+  resume_save_bitfield(download, object);
   
   Object::list_type&    files    = object.insert_preserve_copy("files", Object::create_list()).first->second.as_list();
   Object::list_iterator filesItr = files.begin();
@@ -207,6 +228,8 @@ resume_save_progress(Download download, Object& object
   FileList* fileList = download.file_list();
 
   for (FileList::iterator listItr = fileList->begin(), listLast = fileList->end(); listItr != listLast; ++listItr, ++filesItr) {
+    unsigned int file_index = std::distance(fileList->begin(), listItr);
+
     if (filesItr == files.end())
       filesItr = files.insert(filesItr, Object::create_map());
     else if (!filesItr->is_map())
@@ -219,35 +242,39 @@ resume_save_progress(Download download, Object& object
 
     if (!fileExists) {
       
-      if ((*listItr)->is_create_queued())
+      if ((*listItr)->is_create_queued()) {
         // ~0 means the file still needs to be created.
         filesItr->insert_key("mtime", ~int64_t(0));
-      else
+        LT_LOG_SAVE_FILE("file not created, create queued", 0);
+      } else {
         // ~1 means the file shouldn't be created.
         filesItr->insert_key("mtime", ~int64_t(1));
+        LT_LOG_SAVE_FILE("file not created, create not queued", 0);
+      }
 
       //    } else if ((*listItr)->completed_chunks() == (*listItr)->size_chunks()) {
-    } else if (bitfield->is_all_set()) {
 
-
+    } else if (fileList->bitfield()->is_all_set()) {
       // Currently only checking if we're finished. This needs to be
       // smarter when it comes to downloading partial torrents, etc.
 
       // This assumes the syncs are properly called before
       // resume_save_progress gets called after finishing a torrent.
       filesItr->insert_key("mtime", (int64_t)fs.modified_time());
+      LT_LOG_SAVE_FILE("file completed, mtime:%" PRIi64, (int64_t)fs.modified_time());
 
     } else if (!download.info()->is_active()) {
-
       // When stopped, all chunks should have received sync, thus the
       // file's mtime will be correct. (We hope)
       filesItr->insert_key("mtime", (int64_t)fs.modified_time());
+      LT_LOG_SAVE_FILE("file inactive and assumed sync'ed, mtime:%" PRIi64, (int64_t)fs.modified_time());
 
     } else {
       // If the torrent isn't done and we've not shut down, then set
       // 'mtime' to ~3 so as to indicate that the 'mtime' is not to be
       // trusted, yet we have a partial bitfield for the file.
       filesItr->insert_key("mtime", ~int64_t(3));
+      LT_LOG_SAVE_FILE("file actively downloading", 0);
     }
   }
 }
@@ -257,15 +284,72 @@ resume_clear_progress(Download download, Object& objec
   object.erase_key("bitfield");
 }
 
+bool
+resume_load_bitfield(Download download, const Object& object) {
+  if (object.has_key_string("bitfield")) {
+    const Object::string_type& bitfield = object.get_key_string("bitfield");
+
+    if (bitfield.size() != download.file_list()->bitfield()->size_bytes()) {
+      LT_LOG_LOAD_INVALID("size of resumable bitfield does not match bitfield size of torrent", 0);
+      return false;
+    }
+
+    LT_LOG_LOAD("restoring partial bitfield", 0);
+
+    download.set_bitfield((uint8_t*)bitfield.c_str(), (uint8_t*)(bitfield.c_str() + bitfield.size()));
+
+  } else if (object.has_key_value("bitfield")) {
+    Object::value_type chunksDone = object.get_key_value("bitfield");
+
+    if (chunksDone == download.file_list()->bitfield()->size_bits()) {
+      LT_LOG_LOAD("restoring completed bitfield", 0);
+      download.set_bitfield(true);
+    } else if (chunksDone == 0) {
+      LT_LOG_LOAD("restoring empty bitfield", 0);
+      download.set_bitfield(false);
+    } else {
+      LT_LOG_LOAD_INVALID("restoring empty bitfield", 0);
+      return false;
+    }
+
+  } else {
+    LT_LOG_LOAD_INVALID("valid 'bitfield' not found", 0);
+    return false;
+  }
+
+  return true;
+}
+
 void
+resume_save_bitfield(Download download, Object& object) {
+  const Bitfield* bitfield = download.file_list()->bitfield();
+
+  if (bitfield->is_all_set() || bitfield->is_all_unset()) {
+    LT_LOG_SAVE("uniform bitfield, saving size only", 0);
+    object.insert_key("bitfield", bitfield->size_set());
+  } else {
+    LT_LOG_SAVE("saving bitfield", 0);
+    object.insert_key("bitfield", std::string((char*)bitfield->begin(), bitfield->size_bytes()));
+  }
+}
+
+void
 resume_load_uncertain_pieces(Download download, const Object& object) {
   // Don't rehash when loading resume data within the same session.
-  if (!object.has_key_string("uncertain_pieces") ||
-      !object.has_key_value("uncertain_pieces.timestamp") ||
-      object.get_key_value("uncertain_pieces.timestamp") >= (int64_t)download.info()->load_date())
+  if (!object.has_key_string("uncertain_pieces")) {
+    LT_LOG_LOAD("no uncertain pieces marked", 0);
     return;
+  }
 
+  if(!object.has_key_value("uncertain_pieces.timestamp") ||
+     object.get_key_value("uncertain_pieces.timestamp") >= (int64_t)download.info()->load_date()) {
+    LT_LOG_LOAD_INVALID("invalid information on uncertain pieces", 0);
+    return;
+  }
+
   const Object::string_type& uncertain = object.get_key_string("uncertain_pieces");
+
+  LT_LOG_LOAD("found %zu uncertain pieces", uncertain.size() / 2);
 
   for (const char* itr = uncertain.c_str(), *last = uncertain.c_str() + uncertain.size();
        itr + sizeof(uint32_t) <= last; itr += sizeof(uint32_t)) {
