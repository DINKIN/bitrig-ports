--- src/torrent/utils/signal_bitfield.h.orig	Wed May 14 16:18:48 2014
+++ src/torrent/utils/signal_bitfield.h	Sun Nov  2 01:45:17 2014
@@ -37,20 +37,22 @@
 #ifndef LIBTORRENT_UTILS_SIGNAL_BITFIELD_H
 #define LIBTORRENT_UTILS_SIGNAL_BITFIELD_H
 
-#include <tr1/functional>
+#include lt_tr1_functional
 #include <torrent/common.h>
 
 namespace torrent {
 
 class LIBTORRENT_EXPORT lt_cacheline_aligned signal_bitfield {
 public:
-  typedef uint32_t                    bitfield_type;
-  typedef std::tr1::function<void ()> slot_type;
+  typedef uint32_t               bitfield_type;
+  typedef std::function<void ()> slot_type;
   
   static const unsigned int max_size = 32;
 
   signal_bitfield() : m_bitfield(0), m_size(0) {}
   
+  bool          has_signal(unsigned int index) const { return m_bitfield & (1 << index); }
+
   // Do the interrupt from the thread?
   void          signal(unsigned int index) { __sync_or_and_fetch(&m_bitfield, 1 << index); }
   void          work();
