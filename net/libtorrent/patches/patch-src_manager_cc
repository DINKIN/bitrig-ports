--- src/manager.cc.orig	Wed May 14 16:18:48 2014
+++ src/manager.cc	Sun Nov  2 01:45:17 2014
@@ -60,8 +60,6 @@
 
 #include "manager.h"
 
-namespace tr1 { using namespace std::tr1; }
-
 namespace torrent {
 
 Manager* manager = NULL;
@@ -84,25 +82,25 @@ Manager::Manager() :
 
   m_hashQueue = new HashQueue(&m_main_thread_disk);
   m_hashQueue->slot_has_work() =
-    tr1::bind(&thread_base::send_event_signal,
+    std::bind(&thread_base::send_event_signal,
               &m_main_thread_main,
-              m_main_thread_main.signal_bitfield()->add_signal(tr1::bind(&HashQueue::work, m_hashQueue)),
-              tr1::placeholders::_1);
+              m_main_thread_main.signal_bitfield()->add_signal(std::bind(&HashQueue::work, m_hashQueue)),
+              std::placeholders::_1);
 
-  m_taskTick.slot() = std::tr1::bind(&Manager::receive_tick, this);
+  m_taskTick.slot() = std::bind(&Manager::receive_tick, this);
 
   priority_queue_insert(&taskScheduler, &m_taskTick, cachedTime.round_seconds());
 
   m_handshakeManager->slot_download_id() =
-    std::tr1::bind(&DownloadManager::find_main, m_downloadManager, std::tr1::placeholders::_1);
+    std::bind(&DownloadManager::find_main, m_downloadManager, std::placeholders::_1);
   m_handshakeManager->slot_download_obfuscated() =
-    std::tr1::bind(&DownloadManager::find_main_obfuscated, m_downloadManager, std::tr1::placeholders::_1);
+    std::bind(&DownloadManager::find_main_obfuscated, m_downloadManager, std::placeholders::_1);
   m_connectionManager->listen()->slot_accepted() =
-    std::tr1::bind(&HandshakeManager::add_incoming, m_handshakeManager, std::tr1::placeholders::_1, std::tr1::placeholders::_2);
+    std::bind(&HandshakeManager::add_incoming, m_handshakeManager, std::placeholders::_1, std::placeholders::_2);
 
-  // m_resourceManager->push_group("default");
-  // m_resourceManager->group_back()->up_queue()->set_heuristics(choke_queue::HEURISTICS_UPLOAD_LEECH);
-  // m_resourceManager->group_back()->down_queue()->set_heuristics(choke_queue::HEURISTICS_DOWNLOAD_LEECH);
+  m_resourceManager->push_group("default");
+  m_resourceManager->group_back()->up_queue()->set_heuristics(choke_queue::HEURISTICS_UPLOAD_LEECH);
+  m_resourceManager->group_back()->down_queue()->set_heuristics(choke_queue::HEURISTICS_DOWNLOAD_LEECH);
 }
 
 Manager::~Manager() {
