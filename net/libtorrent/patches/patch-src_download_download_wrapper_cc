--- src/download/download_wrapper.cc.orig	Wed May 14 16:18:48 2014
+++ src/download/download_wrapper.cc	Sun Nov  2 01:45:17 2014
@@ -65,8 +65,6 @@
 #define LT_LOG_STORAGE_ERRORS(log_fmt, ...)                             \
   lt_log_print_info(LOG_PROTOCOL_STORAGE_ERRORS, this->info(), "storage_errors", log_fmt, __VA_ARGS__);
 
-namespace tr1 { using namespace std::tr1; }
-
 namespace torrent {
 
 DownloadWrapper::DownloadWrapper() :
@@ -76,14 +74,16 @@ DownloadWrapper::DownloadWrapper() :
   m_hashChecker(NULL),
   m_connectionType(0) {
 
-  m_main->delay_download_done().slot() = std::tr1::bind(&download_data::call_download_done, data());
+  m_main->delay_download_done().slot()       = std::bind(&download_data::call_download_done, data());
+  m_main->delay_partially_done().slot()      = std::bind(&download_data::call_partially_done, data());
+  m_main->delay_partially_restarted().slot() = std::bind(&download_data::call_partially_restarted, data());
 
   m_main->peer_list()->set_info(info());
   m_main->tracker_list()->set_info(info());
-  m_main->tracker_controller()->slot_success() = tr1::bind(&DownloadWrapper::receive_tracker_success, this, tr1::placeholders::_1);
-  m_main->tracker_controller()->slot_failure() = tr1::bind(&DownloadWrapper::receive_tracker_failed, this, tr1::placeholders::_1);
+  m_main->tracker_controller()->slot_success() = std::bind(&DownloadWrapper::receive_tracker_success, this, std::placeholders::_1);
+  m_main->tracker_controller()->slot_failure() = std::bind(&DownloadWrapper::receive_tracker_failed, this, std::placeholders::_1);
 
-  m_main->chunk_list()->slot_storage_error() = tr1::bind(&DownloadWrapper::receive_storage_error, this, tr1::placeholders::_1);
+  m_main->chunk_list()->slot_storage_error() = std::bind(&DownloadWrapper::receive_storage_error, this, std::placeholders::_1);
 }
 
 DownloadWrapper::~DownloadWrapper() {
@@ -112,8 +112,8 @@ DownloadWrapper::initialize(const std::string& hash, c
 
   info()->mutable_local_id().assign(id.c_str());
 
-  info()->slot_left()      = tr1::bind(&FileList::left_bytes, m_main->file_list());
-  info()->slot_completed() = tr1::bind(&FileList::completed_bytes, m_main->file_list());
+  info()->slot_left()      = std::bind(&FileList::left_bytes, m_main->file_list());
+  info()->slot_completed() = std::bind(&FileList::completed_bytes, m_main->file_list());
 
   file_list()->mutable_data()->mutable_hash().assign(hash.c_str());
 
@@ -123,8 +123,8 @@ DownloadWrapper::initialize(const std::string& hash, c
   m_hashChecker = new HashTorrent(m_main->chunk_list());
 
   // Connect various signals and slots.
-  m_hashChecker->slot_check_chunk() = std::tr1::bind(&DownloadWrapper::check_chunk_hash, this, std::tr1::placeholders::_1);
-  m_hashChecker->delay_checked().slot() = std::tr1::bind(&DownloadWrapper::receive_initial_hash, this);
+  m_hashChecker->slot_check_chunk() = std::bind(&DownloadWrapper::check_chunk_hash, this, std::placeholders::_1);
+  m_hashChecker->delay_checked().slot() = std::bind(&DownloadWrapper::receive_initial_hash, this);
 }
 
 void
@@ -146,6 +146,8 @@ DownloadWrapper::close() {
 
   // Should this perhaps be in stop?
   priority_queue_erase(&taskScheduler, &m_main->delay_download_done());
+  priority_queue_erase(&taskScheduler, &m_main->delay_partially_done());
+  priority_queue_erase(&taskScheduler, &m_main->delay_partially_restarted());
 }
 
 bool
@@ -213,12 +215,20 @@ DownloadWrapper::receive_hash_done(ChunkHandle handle,
       throw internal_error("DownloadWrapper::receive_hash_done(...) received a chunk that isn't set in ChunkSelector.");
 
     if (std::memcmp(hash, chunk_hash(handle.index()), 20) == 0) {
+      bool was_partial = data()->wanted_chunks() != 0;
+
       m_main->file_list()->mark_completed(handle.index());
       m_main->delegator()->transfer_list()->hash_succeeded(handle.index(), handle.chunk());
       m_main->update_endgame();
 
-      if (m_main->file_list()->is_done())
+      if (m_main->file_list()->is_done()) {
         finished_download();
+
+      } else if (was_partial && data()->wanted_chunks() == 0) {
+        priority_queue_erase(&taskScheduler, &m_main->delay_partially_done());
+        priority_queue_erase(&taskScheduler, &m_main->delay_partially_restarted());
+        priority_queue_insert(&taskScheduler, &m_main->delay_partially_done(), cachedTime);
+      }
     
       if (!m_main->have_queue()->empty() && m_main->have_queue()->front().first >= cachedTime)
         m_main->have_queue()->push_front(DownloadMain::have_queue_type::value_type(m_main->have_queue()->front().first + 1, handle.index()));
@@ -240,7 +250,7 @@ DownloadWrapper::check_chunk_hash(ChunkHandle handle) 
   ChunkHandle new_handle = m_main->chunk_list()->get(handle.index(), ChunkList::get_blocking);
   m_main->chunk_list()->release(&handle);
 
-  hash_queue()->push_back(new_handle, data(), tr1::bind(&DownloadWrapper::receive_hash_done, this, tr1::placeholders::_1, tr1::placeholders::_2));
+  hash_queue()->push_back(new_handle, data(), std::bind(&DownloadWrapper::receive_hash_done, this, std::placeholders::_1, std::placeholders::_2));
 }
 
 void
@@ -347,6 +357,8 @@ DownloadWrapper::receive_update_priorities() {
     }
   }
 
+  bool was_partial = data()->wanted_chunks() != 0;
+
   data()->update_wanted_chunks();
 
   m_main->chunk_selector()->update_priorities();
@@ -354,9 +366,17 @@ DownloadWrapper::receive_update_priorities() {
   std::for_each(m_main->connection_list()->begin(), m_main->connection_list()->end(),
                 rak::on(std::mem_fun(&Peer::m_ptr), std::mem_fun(&PeerConnectionBase::update_interested)));
 
-  // TODO: Trigger event if this results in the torrent being
-  // partially finished, or going from partially finished to needing
-  // to download more.
+  // The 'partially_done/restarted' signal only gets triggered when a
+  // download is active and not completed.
+  if (info()->is_active() && !file_list()->is_done() && was_partial != (data()->wanted_chunks() != 0)) {
+    priority_queue_erase(&taskScheduler, &m_main->delay_partially_done());
+    priority_queue_erase(&taskScheduler, &m_main->delay_partially_restarted());
+    
+    if (was_partial)
+      priority_queue_insert(&taskScheduler, &m_main->delay_partially_done(), cachedTime);
+    else
+      priority_queue_insert(&taskScheduler, &m_main->delay_partially_restarted(), cachedTime);
+  }
 }
 
 void
